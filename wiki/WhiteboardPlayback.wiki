#summary Design for enhancments to record and playback in 0.81.

= Overview =

This document gives an overview of the specifications and design for enhancing recording and playback in !BigBlueButton 0.81 to capture and playback *all* activity in the presentation window.

== !BigBlueButton 0.80 ==
When a session is recorded in !BigBlueButton 0.80, the !BigBlueButton server records the media (slides and audio) and events (join, leave, advancement of slides, chat messages, etc.) for later playback.   After a session ends, the !BigBlueButton server runs one or more ingest and processing scripts to process the archived recording.

One of those scripts is `slides.rb` -- the Ruby program to create a playback of slides + audio + chat.  To playback the images, audio, and chat in sequence, playback.html uses Popcorn.js.  For example, here is a recent recording of the committers meeting for 0.81.

The following events are recorded in 0.80
  * !PublicChatEvent - Specifies a chat message sent to all meeting participants
  * !GotoSlideEvent - Specifies a change in slide
  * !AddShapeEvent (pencil, rectangle, ellipse) - Specifies a shape drawn on the whiteboard
  * !UndoShapeEvent - Specifies a clear of the last created shape
  * !ClearPageEvent - Specifies an clear of all shapes on the current page
  * !ResizeAndMoveSlideEvent - Specifies a change in the viewBox of the whiteboard (for pan and zoom)

Note, the `slides.rb` currently only uses the !PublicChatEvent and !GotoSlideEvent.

== !BigBlueButton 0.81 ==

The requirements for !BigBlueButton 0.81 are

  * capture all the presentation events (whiteboard, pan/zoom, cursor movement, and slides) in the presentation area
  * playback all events in HTML5 using Popcorn.js
  
=== Capture of all events ===

The !BigBlueButton 0.81 server will need to add the following event

  * !CursorMoveEvent - Specifies a change in the position of the mouse cursor over the whiteboard

=== Playback of all events ===

Popcorn.js includes a plugin called 'Code', which are hooks to enable Popcorn.js to execute an external !JavaScript function at the start and end of a duration of time, as well as 60 times/second using its onFrame option.

To playback all the presentation events, the requirement is to write an external !JavaScript function to render a frame 60 times per second using this Code plugin. The function will

	# Get the current time of the video playback.
	# Use this time to compute the following information:
		# What are the current shapes to be drawn?
		# Is there any pan and zoom level on these shapes at this specific time?
		# What is the current coordinates of the cursor at this specific time?
	# Draw the shapes at the appropriate pan and zoom level.
	# Move the cursor if it needs to be moved.

This function will be driven by data created by `slides.rb` (this time extracting all the presentation events).  Breaking down the series of steps:

1. The ingest and processing script `slides.rb` will run, parse the events.xml, and include !AddShapeEvent, !UndoShapeEvent, !ClearPageEvent, !CursorMoveEvent and !ResizeAndMoveSlideEvent in the output. It will create the regular slides.xml with chat events in it, and in addition create the following new files

   * `shapes.svg` which includes the shapes for the presentation
   * `panzooms.xml` which will specify the panning and zooming events 
   * `cursor.xml` which specifies the cursor movement events

The whiteboard images will be encapsulated in SVG (Scalable Vector Graphics).  With SVG, it's possible to generate native line, rect, ellipse, text shapes, including groups of shapes, and, most importantly, visibility. Visiblity will allow playback to specify which shapes are rendered for the given frame and selectively show them.

`slides.rb` will place the new files in the playback directory for loading by playback.html.

2.  When the user opens playback.html in their browser, it will load the SVG image, which by default will be not visible.
 
Using the Popcorn.js function, it will follow the steps as previously outlined above and thus display shapes and events at a rate of at most 10 frames/second. The downstep in performance from 60x/sec to 10x/sec is due to the precision of the events compared to the times that Popcorn fires as it is playing back audio.

Because we will be panning and zooming the images directly, we want these images to be apart of the SVG image. This will result in the removal of the need for the Image plugin in Popcorn which we use currently to change the slide images during playback. To integrate this change, changes to the `slides.rb` will also have to be made in that regard.

== Specification of events ==
The following descirbes how each event will appear in the events.xml

=== !AddShapeEvent ===

	=== Pencil Example ===
	This involves a series of vectors (a bunch of pairs of x and y coordinates) with a specified colour, thickness and a timestamp to specify when it was created.  
	Example:
	{{{
<event timestamp="1340985829714" module="WHITEBOARD" eventname="AddShapeEvent">
	<presentation>default</presentation>
	<thickness>1</thickness>
	<pageNumber>0</pageNumber>
	<dataPoints>10.08,64.36,10.08,64.17,10.08,63.61</dataPoints>
	<color>0</color>
	<type>pencil</type>
</event>
	}}}
	
	=== Rectangle Example ===
	An (x,y) point for the top left corner and a height and width of the rectangle. It also includes the additional properties such as colour, thickness, [xxx]. Example:
	{{{
<event timestamp="1340907960410" module="WHITEBOARD" eventname="AddShapeEvent">
	<presentation>default</presentation>
	<thickness>1</thickness>
	<pageNumber>0</pageNumber>
	<dataPoints>4.83333333333333,11.77777777777779,66.3333333333333,68.4444444444444</dataPoints>
	<type>rectangle</type>
	<color>0</color>
</event>
	}}}
	
	=== Ellipse Example ===
	An ellipse which involves an (x,y) point for the top left hand corner and a height and width. A curve between these points is created.  Example:  
	{{{
<event timestamp="1340907956089" module="WHITEBOARD" eventname="AddShapeEvent">
	<pageNumber>0</pageNumber>
	<type>ellipse</type>
	<presentation>default</presentation>
	<color>0</color>
	<thickness>1</thickness>
	<dataPoints>46.0,20.666666666666668,87.5,63.111111111111114</dataPoints>
</event>
	}}}

== New shape(s) to be included in !BigBlueButton 0.81 ==

	=== Text Example ===
	Text includes font, font size, colour, x and y coordinates and the value of the text itself.  Example:
	{{{
<event timestamp="1340907921555" module="PRESENTATION" eventname="AddShapeEvent">
	<type>text</type>
	<dataPoints>14.166666666666666,58.44444444444444</dataPoints>
	<presentation>default</presentation>
	<fontsize>18</fontsize>
	<color>0</colour>
	<pageNumber>0</pageNumber>
	<text>This is a test</text>
	<font>Verdana</font>
</event>
	}}}

== Events in !BigBlueButton 0.80 ==
	
=== !GoToSlideEvent ===
	The shapes are typically drawn on various slides so to process these different slides we use the !GoToSlideEvent in the events.xml file. Keeping track of the images associated with each slide number allows us to make sure that the correct slide is displayed when the shapes and other whiteboard events are drawn.
	
	An example !GoToSlideEvent is as follows: 
	{{{
<event timestamp="1340984980211" module="PRESENTATION" eventname="GotoSlideEvent">
	<slide>0</slide>
</event>
	}}}
	
=== !UndoShapeEvent ===
	SVG images are basically XML files, so we can give each shape as many properties as we wish. One of the properties to give it would be a time when the shape is undone (if it ever is undone).
	Javascript can look for this property and compare it with the current time to decide whether the shape should be displayed or not. An undo event occurs on a single shape at a time.
	
	An example of an !UndoShapeEvent is as follows:
	{{{
<event timestamp="1340907563662" module="WHITEBOARD" eventname="UndoShapeEvent">
	<presentation>default</presentation>
	<pageNumber>0</pageNumber>
</event>
	}}}
	
=== !ClearPageEvent ===
	SVG allows shapes to be grouped together. These groups could specify pages of shapes. Because pages can be selectively displayed as well, this will enable javascript to decide which pages are displayed at specific times, making playback of shapes on changing slides as simple as toggling the correct pages' visibilities. !ClearPageEvents are processed as an undo event occuring on all the page's shapes at the exact same time. Therefore, a shape will have an undo time associated with it if it gets undone via the !UndoShapeEvent or if it is cleared in a mass !ClearPageEvent, whichever occurs first.
	
	An example of a !ClearPageEvent in the events.xml file is as follows:
	{{{
<event timestamp="1340907564165" module="WHITEBOARD" eventname="ClearPageEvent">
	<pageNumber>0</pageNumber>
	<presentation>default</presentation>
</event>
	}}}
	
=== !ResizeAndMoveSlideEvent ===
	SVG includes a property called viewBox which specifies a section of the image to display. It takes in 4 values, the x and y top corner of the image and the height and width. This is then resized accordingly to fit the space the SVG image usually takes up. By specifying a smaller height and width you can create a zoom effect, and by specifying a new x and y top-corner value, we can create a panning effect. These four values are already recorded in the !ResizeAndMoveSlideEvent, which can be more or less replicated to create a viewBox value for the SVG image at the specified time. Javascript can modify this value and playback the panning and zooming effects.
	
	An example !ResizeAndMoveEvent from the events.xml:
	{{{
<event timestamp="1340985831988" module="PRESENTATION" eventname="ResizeAndMoveSlideEvent">
	<yOffset>-7.15379815414964</yOffset>
	<xOffset>-5.346456543022041</xOffset>
	<widthRatio>70.83333333333334</widthRatio>
	<heightRatio>70.83333333333333</heightRatio>
</event>
	}}}
	
== New event to be added in !BigBlueButton 0.81 ==

=== !CursorMoveEvent ===
	Using and additional CSS circle, we can mimic the appearance of a moving cursor during playback. The cursor events are recorded in a !CursorMoveEvent in the events.xml. It is composed of an xOffset and yOffset value which are percentages of the entire screen as X and Y coordinates of the cursor at that specific time. An example XML snippet of this event can be seen below. It represents a cursor moving to 20% right of the left-hand side of the page and 56% down the page, where (0,0) represents the top left hand corner of the slide. The example from the events.xml is as follows:
	{{{
<event timestamp="1341323056855" module="PRESENTATION" eventname="CursorMoveEvent">
	<xOffset>20</xOffset>
	<yOffset>56</yOffset>
</event>
	}}}