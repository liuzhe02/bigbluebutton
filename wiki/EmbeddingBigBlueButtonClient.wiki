#summary Embedding BigBlueButton in 3rd-Party HTML.

= Introduction =

This page describes how the Flash !BigBlueButton Client can be driven by an external 3rd-party Javascript.

Some 3rd-party applications want to display parts of !BigBlueButton client in HTML5 while the other parts are still in Flash. To make this happen, we are creating an API bridge so that the 3rd-party application can embed !BigBlueButton Flash Client and be able to send commands as well as receive events from the Flash Client.


= Design =

== High-Level Overview ==
The diagram below shows a high-level design of the capability of a 3rd-party application interacting with the Flash Client.

http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/api-bridge/embedding-bbb.png

In this diagram, the 3rd-party javascript will interact with the !BigBlueButton API javascript. The 3rd-party js will register to receive events and call functions on the API bridge to send commands to the Flash Client. The Flash Client exposes some callbacks through the Flash [http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/external/ExternalInterface.html ExternalInterface] class.

== Message Exchange Sequence ==

http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/api-bridge/embedding-bbb-1.png

In the above diagram, we see the steps needed for the 3rd-party application and the Flash Client to be able to communicate with each other. When the Flash Client loads, it needs to perform a handshake with the HTML container to make sure that communication between Flash and Javascript is possible.

== Call Flow ==
The diagram below shows a detailed interaction between the 3rd-party application and the Flash Client.


http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/api-bridge/embedding-bbb-2.png

As an example, let's look at what happens when the user joins the voice conference. The user clicks a HTML button to join the voice conference. Clicking the button executes a javascript function (1) which calls into the !BigBlueButton API bridge. The bridge then executes a callback (2) method exposed by the Flash Client through the !ExternalInterface. The callback handler dispatches an event so that other parts of the client will (4) handle it and perform the necessary action to join the voice conference. An event is dispatched when the user has joined the voice conference which is received by the !EventApiMap (5). The !EventApiMap will invoke methods on the !ExternalApiCall (6) which forwards the call to the API bridge (7). The API bridge then broadcast the event to all interested listeners.