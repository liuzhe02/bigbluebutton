#summary Developer information for testing BigBlueButton

<wiki:toc max_depth="3" />

= Introduction to Testing !BigBlueButton =

This document is intended for developers who want to help load test, unit test, and stress test !BigBlueButton.

This document (currently in its early stages) gathers together the various approaches to testing !BigBlueButton.

== Quick Checks ==

!BigBlueButton has a lot of ConfigurationFiles.  A quick check to see if your !BigBlueButton server is properly configured, use the command

{{{
   sudo bbb-conf --check
}}}

This script runs through numerous checks for missing process, incorrect parameter in configuration files, missing packages, Unix ports that don't have any listeners, and known error messages in log files that indicate a configuration problem.  An warnings or potential errors are printed after the message "* Possible Problems *".  

The !BigBlueButton process generate a lot of log files.  To quickly scan all the log files for errors or exceptions, use the command

{{{
   sudo bbb-conf --debug
}}}

After !BigBlueButton has been running for a while, the log files get large.  When figuring out exactly what caused the error, a common technique is to do the following:

{{{
   sudo bbb-conf --clean
   sudo bbb-conf --watch
}}}

This will clean out all the log files (so there are no errors in the loogs), and display in the terminal the network activity and output of `bbb-conf --debug` every two seconds.

http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/testing/watch.png

Using `--watch` you can connect to the !BigBlueButton server and try a series of steps that you suspect causes an exception.  You'll see the exception appear almost immediately when it occurs.


== Testing with many clients ==

A good stress test for !BigBlueButton is to generate load with many users.  Once you have 20, 40, 80 users connected, especially for long periods of time, you can watch the memory usage on the server with a tools such as JConsole.

To generate users, there is a shell script `bbb-test` located [https://github.com/bigbluebutton/bigbluebutton/blob/master/labs/stress-testing/bbb-test here].  This script will let you startup N !BigBlueButton clients on a remote !BigBlueButton server.

Run this script on a Ubuntu Desktop (either 10.04 or 10.10).  Firefox comes already installed with Flash.  

For purposes of this example, let's say we're testing the !BigBlueButton server at 192.168.0.104.  We also have a separate computer running Ubuntu Desktop that we want to open a number of test clients to the !BigBlueButton server.  

On 192.168.0.104, edit the `config.xml` and change autoJoin for the PhoneModule to true.

{{{
<module name="PhoneModule" url="PhoneModule.swf?v=VERSION" 
        uri="rtmp://192.168.0.225/sip" 
        autoJoin="false"
        dependsOn="ViewersModule"
/>
}}} 

This will automatically join new users into the voice.

Next, copy the utility bbb-test to your Ubuntu desktop.  On the Ubuntu Desktop, start FireFox, connect to your !BigBlueButton server, and join the voice conference.  Flash will prompt you to join.  

To remove the Flash prompt, open the global Flash Privacy Settings Manager using this [http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager02.html link].  Find the IP address 192.168.0.104 and choose "always allow".

http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/testing/privacy.png

Click the mute all button.    

At this point, any subsequent !BigBlueButton clients launched from the Ubuntu desktop computer will automatically join the voice conference muted.

To launch ten more clients, enter:

{{{
   bbb-test -h 192.168.0.104 -n 10
}}}

and the utility will ten !BigBlueButton clients, each in their own tab, on the !BigBlueButton server at 192.168.0.104.

Here's a snapshot of the FireFox client.


http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/testing/tenusers.png




= Monitor BigBlueButton with Jconsole/JVisual VM=

In this page, we are going to describe how to monitor !BigBlueButton's performance (memory consumption, CPU usage, threads, etc) using  [http://download.oracle.com/javase/6/docs/technotes/tools/share/jconsole.html  Jconsole] and/or [http://download.oracle.com/javase/6/docs/technotes/guides/visualvm/index.html JVisualVM]. 

Jconsole and VisualVM can put load on your server. It is recommended to connect remotely to your server to have correct results. 

== Generate Keys ==

Go to the Red5 conf directory
{{{
   cd /usr/share/red5/conf
}}}

Generate a keystore. You will be prompted for password and other information. Make note of the password you entered as you'll need them later.
{{{
   sudo keytool -genkey -alias jconsole -keystore red5JConsoleKeyStore
}}}

Check if the keystore has been generated properly.
{{{
   keytool -list -keystore red5JConsoleKeyStore
}}}

Let's export the keystore so we can use it to connect from JConsole or VisualVM
{{{
   sudo keytool -export -alias jconsole -keystore red5JConsoleKeyStore -file jconsole.cert
}}}

Now we copy {{{jconsole.cert}}} into the machine where we will run jconsole or VisualVM. Let's put it into a folder called {{{D:\visualvm}}}.

Import the into a file call {{{red5KeyStore}}}. When prompted for a password, enter the password you used when you created the keystore.
{{{
D:\visualvm>keytool -import -alias red5 -keystore D:\visualvm\red5KeyStore -file jconsole.cert
}}}

Now let's configure Red5 to use the keystore we generated and accept connections using SSL.

Open up {{{/usr/share/red5/conf/red5.properties}}}. Change the value of {{{rtmps.keystorepass}}} to the password you entered when generating the keystore. Also, change {{{jmx.rmi.host}}} to the IP of your Red5 server. And set {{{jmx.rmi.ssl=true}}}.

{{{
rtmps.keystorepass=password

# JMX
jmx.rmi.port.registry=9999
jmx.rmi.port.remoteobjects=
jmx.rmi.host=192.168.0.166
jmx.rmi.ssl=true
}}}

Open {{{/usr/share/red5/conf/conf/red5-common.xml}}}. Edit the value of {{{remoteSSLKeystore}}} to the keystore we generated (i.e. {{{red5JConsoleKeyStore}}}).
{{{
        <bean id="jmxAgent" class="org.red5.server.jmx.JMXAgent" init-method="init">
                <!-- The RMI adapter allows remote connections to the MBeanServer -->
                <property name="enableRmiAdapter" value="true"/>
                <property name="rmiAdapterPort" value="${jmx.rmi.port.registry}"/>
                <property name="rmiAdapterRemotePort" value="${jmx.rmi.port.remoteobjects}"/>
                <property name="rmiAdapterHost" value="${jmx.rmi.host}"/>
                <property name="enableSsl" value="${jmx.rmi.ssl}"/>
                <!-- Starts a registry if it doesnt exist -->
                <property name="startRegistry" value="true"/>
                <!-- Authentication -->
                <property name="remoteAccessProperties" value="${red5.config_root}/access.properties"/>
                <property name="remotePasswordProperties" value="${red5.config_root}/password.properties"/>
                <property name="remoteSSLKeystore" value="${red5.config_root}/red5JConsoleKeyStore"/>
                <property name="remoteSSLKeystorePass" value="${rtmps.keystorepass}"/>
                <!-- Mina offers its own Mbeans so you may integrate them here -->
                <property name="enableMinaMonitor" value="false"/>
        </bean>
}}}


Make note of the username and password in {{{/usr/share/red5/conf/password.properties}}}, you will need it when connecting using JConsole and VisualVM. If you want to change it from the default, you can go ahead. 

{{{
red5user changeme
}}}

From your monitoring machine, startup JConsole passing in the location of the keystore and the password you entered when generating the keystore.
{{{
   D:\visualvm>jconsole -J-Djavax.net.ssl.keyStore="D:\visualvm\red5KeyStore" -J-Djavax.net.ssl.keyStorePassword=password -J-Djavax.net.ssl.trustStore="D:\visualvm\red5KeyStore"
}}}

You will be prompted to connect to the Red5 server. Use your server ip. Enter the username and password defined in {{{/usr/share/red5/conf/password.properties}}}
{{{
   service:jmx:rmi://192.168.0.166:9999/jndi/rmi://192.168.0.166:9999/red5
}}}

You should now be able to monitor Red5 using JConsole.

For JVisualVM, the steps are not different. From your monitoring machine, startup JConsole passing in the location of the keystore and the password you entered when generating the keystore.
{{{
D:\visualvm>visualvm -J-Djavax.net.ssl.keyStore="D:\visualvm\red5KeyStore" -J-Djavax.net.ssl.keyStorePassword=password -J-Djavax.net.ssl.trustStore="D:\visualvm\red5KeyStore"
}}}

You will be prompted to connect to the Red5 server. Use your server ip. Enter the username and password defined in {{{/usr/share/red5/conf/password.properties}}}
{{{
   service:jmx:rmi://192.168.0.166:9999/jndi/rmi://192.168.0.166:9999/red5
}}}

You should now be able to monitor Red5 using JVisualVM.

==References==

[http://www.red5tutorials.net/index.php/An_idiot's_guide_to_RMI/JMX_remote_connections_-_without_SSL_/_authentication An idiot's guide to RMI/JMX remote connections - without SSL / authentication]

[http://www.componative.com/content/controller/developer/insights/jconsole2/index.html Monitor Your Applications With JConsole - Part 2]