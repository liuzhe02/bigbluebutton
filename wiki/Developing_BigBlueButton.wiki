#summary How to develop BigBlueButton.

<wiki:toc max_depth="2" />

*NOTE*
This is still draft. We will finalize this when we release 0.62. If you run into problems, please post to the mailing list.

= Welcome =
We want to make it easy for you develop and extend BigBlueButton.  To achieve this, rather than just throw a tarball over the wall, we've tried to provide you tools and documentation to quickly setup a development environment, make a change, and see that change deployed to your own BigBlueButton server.

One of the tools is the BigBlueButton VM.  There are over fourteen OpenSourceComponents in BigBlueButton, and it's no small feat to set everything up.  In the beginning, we developed everything on Windows, and then manually installed all the components on a server.  That was a pain.  Next we created packages so InstallationUbuntu would only take a few minutes.  The pain reduces, but we were still developing and testing in Windows, but releasing and supporting on Unix.  Any difference between the two platforms caused lots of headaches in bug fixing.

We've evolved our process to use the BigBlueButton VM both as a fully functional implementation of !BigBlueButton _and_ as a complete development environment for edit-build-test-deploy.  Internally, we still use Windows for running Eclipse and Flex Builder, but the files are written to a BigBlueButton VM (via a Samba network share).

The !BigBlueButton VM runs Ubuntu 9.04.  Of course, you may not be developing using Ubuntu, no may you want to run the VM.  In that case, it can provide you a reference implementation that includes a properly setup !BigBlueButton server along with all the tools to make changes to the code.  By looking through the configuration (and using the docs below), you should be able to setup your own environment.

We'll start by showing you how with issuing a few commands in a terminal window you can make changes to !BigBlueButton and immediately see the updates in the VM.  The second part of this document shows how to setup Eclipse and Flex Builder to do day-to-day development.


== Getting Started ==
First setup a BigBlueButtonVM.  Next, read the ArchitectureOverview to understand the main components of !BigBluebutton.

There are basically three main components to BigBlueButton, each has it's own configuration for development.

  * bigbluebutton-web (referred as bbb-web) is the scheduling and login web interface written in Grails.
  * bigbluebutton-client (referred to as bbb-client) is the real-time Flash client written in Flex.
  * bigbluebutton-apps (referred to as bbb-apps) is the red5 module that provides the synchronization logic for the bbb-client.

== Setting up the BigBlueButton VM ==

If you are developing on Windows, you'll want to access the !BigBlueButton source tree checked out on the VM.  To do this, issue the following command

{{{
  bbb-conf --setup-samba
}}}

This will share the `/home/firstuser/dev` folder so you can easily access your source from any windows editor.  Some editors (such as Eclipses) need you to map a network drive to a 
Next, map /home/firstuser into a windows drive (e.g. V:).  To do this, open Windows Explorer, hit the Alt key, and choose the menu command Tolls -> Map Network Drive.

Once you've mapped it as your V drive, you can edit the files from within windows. 

Note: `bbb-conf` is the !BigBlueButton configuration utility.  It's a bash shell script that lives in `/usr/local/bin/bbb-conf`.   If you are following through the instructions below and want to see what happens when you invoke bbb-conf, just crack open the scrip and you'll see the sequent of commands.  You can use those commands as a basis for setting up your own environment.  


= How to make changes to BigBlueButton client =
We will start by showing you how to make quick and easy changes to !BigBlueButton.  To do this, we'll use `bbb-conf` to setup a development environment for bbb-web, bbb-client, nd bbb-apps.  

If you want to jump right into setting up a complete environment, we recommend going through one of the examples below before skipping ahead to the next section on "Setup a Full Development Environment"

Let's start with making a change to the Flex client.

== bbb-client: Making changes to the BigBlueButton Flex client ==

When we build the client, the output will go into `/home/firstuser/dev/bbb-client`.  To setup a development environment for bbb-web, enter the following command

{{{
  bbb-conf --setup-dev bbb-client
}}}


You may be prompted to enter your password for `firstuser` -- this is because the script is running some commands as root using sudo.   This script does the following:

  # run `svn checkout http://bigbluebutton.googlecode.com/svn/trunk/bigbluebutton-client bbb-client`
  # Modify the root for '/client' in nginx to point to `/home/firstuser/dev/bbb-client`
  # Restart nginx 
  # Copy the `config.xml` from `/var/www/bigbluebutton/client/conf` into `~/dev/bbb-client/bin/conf/config.xml`

The first step anonymously checks out the code.  The next step points request to the load the client to your local build.  This leaves the current BigBlueButton client installed and untouched if you want to revert back.  To revert back, edit `/etc/nginx/sites-available/bigbluebutton` and make the entry for `/client' match the following.

{{{
        location /client {
                root    /var/www/bigbluebutton;
                index  index.html index.htm;
        }
}}}

The last steps copies the current settings for `config.xml` into your local development directory.  This way, the local !BigBlueButton client has the same configuration.

Everything is now setup to compile the local version of bbb-client.

{{{
  cd ~/dev/bbb-client
  ant
}}}

This ant script runs the default task (cleanandmake) to use the Flex mxmlc compiler to rebuild the client from source. The resulting client is stored into `~/dev/bbb-client/bin`.  If the IP address for your !BigBlueButtom VM is 192.168.0.182, you should be able to browse, login, and see your client.  

Okay, at this point it looks the same.  Again, behind the scenes, nginx is loading the client from `~/dev/bbb-client/bin`.  Let's make a change.  Notice at the top of the client it says "You are logged in as <yourname> ...".  Let's find where that is in the code, change it, and rebuild.

{{{
$ find . -exec grep -H "You are logged" '{}' \;
}}}

You'll get some point, and one line in particular

{{{
./src/org/bigbluebutton/main/view/components/MainToolbar.mxml:                          loggedInUserLbl.text = "You are logged in as " + name + " to " + room + " as role " + role + ".";
}}}

Edit this line and change the text to "You are NOW are logged in as".  Type `ant` to rebuild the client.  Now open your web browser, login to !BigBlueButton, and launch the client.  You should see the change.


== bbb-web: Making changes to the BigBlueButton web interface ==

The BigBlueButton web interface is written in grails, so the development environment is going to setup for building a grails application.  The first step is to setup a development environment for bbb-web.

{{{
  bbb-conf --setup-dev bbb-web
}}}

This script does the following steps:

# svn checkout http://bigbluebutton.googlecode.com/svn/trunk/bigbluebutton-web bbb-web
# Sets your local IP address into  `~/.grails/bigbluebutton-config.properties`
# makes all files in `/var/bigbluebutton` writable by everyone

The second step sets up a global property for grails so it knows the IP address of your server.  We're going to run the grails application in the `firstuser` account, so the third step opens the permissions to the director where the presenter uploads slides.

Again, like bbb-client, we replace the existing bbb-web package; rather, it will let you run bbb-web as a stand alone grails application.  First, before your run bbb-web standalone, you need to stop tomcat.  

{{{
  sudo /etc/init.d/tomcat6 stop
}}}

Next, let's compile and run bbb-web

{{{
  cd ~/dev/bbb-web
  ant
}}}

The default task for ant is to do make sure all the libraries are up-to-date (using ivy), then execute the command `grails run-app`.  This will output the console to the command line, making it easy to see any exceptions as you interact with the web interface.


If you want to revert back to the web interface installed by the package bbb-web, do the following

{{{
  # Make sure grails isn't running
  sudo /etc/init.d/tomcat6 start
}}}



== bbb-apps: Making changes ==

To setup a development environment for bbb-apps, enter the following command

{{{
  bbb-conf --setup-dev bbb-apps
}}}

This will checkout bbb-apps to `~/dev/bbb-apps`.  The easiest way to run your own version of bbb-apps is to run red5 from the command line.  This way, you can immediately see any errors on the console.  To do this

{{{
    sudo /etc/init.d/red5 stop
}}}

Now, to test your own local copy, do the following.
{{{
    cd ~/dev/bbb-apps

    # Make changes to source

    ant deploy
    sudo -u red5 /usr/share/red5/red5.sh
}}}

If you want to revert back to the packaged version of BigBlueButton apps, do the following

{{{
    rm -rf /usr/share/red5/webapps/bigbluebutton
    sudo apt-get install bbb-apps
    sudo /etc/init.d/red5 start
}}}
----

_Older content -- to be updated__

= Setup a Full Development Environment =
The instructions below assumes you have FlexBuilder and Eclipse installed with the Subclipse plugin.

== Remove BBB packages ==

List the BBB packages by typing
{{{
dpkg -l | grep bbb
}}}

which results:
{{{
rc  bbb-apps                          0.35.0-1ubuntu113                         Red5 applications for BigBlueButton
ii  bbb-apps-deskshare                0.4.0-1ubuntu53                           Red5 applications for BigBlueButton deskshar
ii  bbb-apps-sip                      0.5.0-1ubuntu14                           Red5 applications for BigBlueButton SIP modu
ii  bbb-apps-video                    0.5.0-1ubuntu8                            Red5 applications for BigBlueButton Video mo
ii  bbb-config                        0.4.0-1ubuntu63                           Configuration setup for BigBlueButton

}}}

 * To remove, type e.g. {{{apt-get remove bbb-apps}}}
 * Create a dev directory in /home/firstuser/dev
 
== Developing the Client ==
Create a client dev directory
{{{
 cd ~/dev
 mkdir ~/dev/source
 mkdir ~/dev/source/client
}}}

From your FlexBuilder, checkout bbb-client from trunk. Make sure you checkout into the `~/dev/source/client` directory through your mapped network drive.

Copy over the packaged `config.xml` over your dev `config.xml`
{{{
  cp /var/www/bigbluebutton/client/conf/config.xml ~/dev/source/client/bigbluebutton-client/conf/
}}}

Make Nginx serve the dev client. The generated files for bbb-client will be in bbb-client/bin folder.

Create a directory `/var/www/client-dev`

{{{
  sudo mkdir /var/www/client-dev
  sudo ln -s /home/firstuser/dev/source/client/bigbluebutton-client/bin /var/www/client-dev/client 
}}}

Edit Nginx config
{{{
 sudo vi /etc/nginx/sites-available/bigbluebutton
}}}

Modify the `/client` section to point to `/var/www/client-dev`
{{{
        location /client {
                root    /var/www/client-dev;
                index  index.html index.htm;
        }
}}}

Now your development client will be picked up when you point your browser to 
{{{
http://<yourhost>/client/BigBlueButton.html
}}}

= Developing bbb-apps, bbb-sip, bbb-video, bbb-deskshare =
 * Edit the build.properties for each project modify red5.home to point to the red5 install directory
{{{
  red5.home = /usr/share/red5
}}}
 * For each project, run {{{ant resolve}}} to download all dependencies.
 * For each project, run {{{ant deploy}}} to deploy the apps to Red5
 * Start Red5
 * If everything goes well, you should be able to join the default conference.

= Developing bbb-web =
 * Check out bbb-web into /home/firstuser/dev
 * Stop tomcat 
{{{
 /etc/init.d/tomcat6 stop
}}}
 * in {{{/home/firstuser/dev/bbb-web}}}, run 
{{{
 grails run-app
}}}
 * You should now be using bbb-web when you point your browser to
{{{
 http://<yourip>/bigbluebutton
}}}