#summary Set up a development environment for the !BigBlueButton HTML5 client
#labels Phase-Implementation

= HTML5 Development Environment Setup =

<wiki:toc max_depth="2" />


== !BigBlueButton HTML5 Client Design ==
If you have not already done so, you should read through an [HTML5 Overview of HTML5 Client].

== Initial setup ==

Before you begin, you will need to have a !BigBlueButton server installed from packages built from the master branch, referred hereafter as 0.81-dev.  The !BigBlueButton HTML5 client is based on 0.81-dev. To install 0.81-dev from packages, follow the instructions at [081InstallationUbuntu Installing 0.81-dev packages].

Once you have 0.81-dev installed, you need to setup a development environment on the !BigBlueButton server.  This will allow you to rebuild specific components from source.  Since the HTML5 client is on a separate branch from master, setting up a development environment requires a few changes to the default steps for setting up a standard development environment.

To setup the standard development environment for the HTML5 client, follow the instructions at [DevelopingBBB] with the following changes:

  * Under "Checking out the source", use the git command `git checkout -b html5-bridge origin/html5-bridge` to switch to the HTML5 client branch.
  * At a minimum, you must build and deploy or run the Client, BBB-Web, and Red5 Applications components.

== HTML5 Bridge component ==

=== Installation ===

The HTML5 bridge component is currently written using node.js. Since Ubuntu 10.04 doesn't ship an up-to-date version of node.js, it's easiest to use a PPA:

{{{
sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get update
sudo apt-get install nodejs
}}}

Now you can use `npm` to install the node.js dependencies:

{{{
cd ~/dev/bigbluebutton/labs/bbb-html5-client
npm install
}}}

=== Running ===

The HTML5 client uses the redis database to store information about the meetings. Right now, there isn't an "automatic" way to delete the keys, so it's recommended that each time that you run the html5 client, you should clean the redis database.

Clean the database: 

{{{
redis-cli flushdb
}}}

Perform a clean restart of !BigBlueButton

{{{
sudo bbb-conf --clean
}}}

Run the HTML5 client bridge:

{{{
cd ~/dev/bigbluebutton/labs/bbb-html5-client
node app.js
}}}

=== Usage ===

  1.  Before using the HTML5 client, you must create a meeting and join it using the Flash client. The easiest way to do this is to join the Demo Meeting.
  2.  Open another tab or a new browser
  3.  Go to the address: http://yourIP:3000
  4.  Demo Meeting should appear from the dropdown menu
  5.  Write your name and you will join to the meeting throught the HTML5 client 

What is working?

  *  Users module: Join, leave, get list of participants, change presenter
  *  Chat Module: send public chat, get history chat
  *  Presentation Module: load slides from Flex client, change slide, red dot
  *  Whiteboard Module: Draw and store pencil shape from Flex client 

== Streaming Audio ==

Note that the streaming code is still a work in progress! The following instructions were correct at time of writing, but are subject to change.

In the current prototype, streaming audio is achieved by using the freeswitch mod_shout module to stream audio via an icecast server. This requires installing some additional software and doing some manual configuration.

=== Icecast ===

The stock Ubuntu 10.04 packages for icecast are sufficient for mp3 or vorbis format streaming. You can install them with the command

{{{
apt-get install icecast2
}}}

You will be prompted during installation to enter several passwords. You'll need to remember the "source" password for later when configuring !BigBlueButton

=== Freeswitch ===

The build of freeswitch included with the !BigBlueButton packaging doesn't have the shoutcast module enabled, so we'll have to build an updated version.

Before starting, stop the current freeswitch:

{{{
/etc/init.d/bbb-freeswitch stop
}}}

Here are the steps:

{{{
sudo apt-get install autoconf automake libtool
cd ~/dev
git clone git://git.freeswitch.org/freeswitch.git
cd freeswitch
./bootstrap.sh
}}}

You now have to edit the file `modules.conf` in the freeswitch build directory, and ensure that the line saying `formats/mod_shout` is uncommented. Then continue with configuring, building, and installing:

{{{
./configure
make
sudo make install
}}}

This will install a new copy of freeswitch into /usr/local/freeswitch (the standard freeswitch install is under /opt/freeswitch). To get it running requires a few additional steps. First, you should copy the configuration from the !BigBlueButton freeswitch to your new build:

{{{
sudo mv /usr/local/freeswitch/conf /usr/local/freeswitch/conf.dist
sudo cp -R /opt/freeswitch/conf /usr/local/freeswitch/conf
}}}

You need to edit the file `/usr/local/freeswitch/conf/autoload_configs/modules.conf.xml` to uncomment the line that loads mod_shout.

Now, reset the permissions on the installed directories:

{{{
sudo chown -R freeswitch:daemon /usr/local/freeswitch
}}}

And edit the init script `/etc/init.d/bbb-freeswitch`, and replace all references to /opt with /usr/local (make sure you get them all!) You can then start the new freeswitch,

{{{
/etc/init.d/bbb-freeswitch start
}}}

===Configuring BigBlueButton===

You can now configure BigBlueButton to automatically start streaming the audio to Icecast when the audio bridge is started. You have to edit the bigbluebutton-apps "bigbluebutton.properties" file to set the location of the Icecast server. See https://github.com/bigbluebutton/bigbluebutton/blob/html5-bridge/bigbluebutton-apps/src/main/webapp/WEB-INF/bigbluebutton.properties

You will need to set the `icecast.password` parameter to your configured password, and enable the streaming by setting `icecast.broadcast=true`

There are some limitations in this streaming method right now: Unless either a) recording is enabled or b) there are at least 2 people in the audio conference (joined via flash) you will hear no audio. We're still investigating the best way to correct this in the freeswitch conference module.

==Streaming Video==

Even more than the streaming audio support, the streaming video is in the early prototype stages. At the moment, it's only possible to run a single stream, and it's a very manual process with multiple incomplete or development pieces.

=== Setting up the Gstreamer Streaming Server ===

Since the Gstreamer Streaming Server is fairly new code, it doesn't work properly on the Ubuntu 10.04 for the BigBlueButton server. At the moment, you'll want to use a separate machine running Ubuntu 12.04 for video development. We expect that once the HTML5 client is integrated, we will have updated the core BigBlueButton server to run on Ubuntu 12.04.

Grab the server code from http://cgit.freedesktop.org/gstreamer/gst-streaming-server/ and build it. You will probably have to install some dependencies with development libraries.

(someone should make a list and add it here, perhaps?)

The server binary itself is under the tools/ directory. Before you can run it, you must use 'genkey' to create an example self-signed ssl certificate. Once that's done, you can run ./ew-stream-server to start the server.

To log into the streaming server, navigate to http://_hostname_:8080/login and use the username/password "admin/admin".

=== Sending a video stream to the Streaming Server ===

At the moment, this must all be done manually. First, you must find the rtmp stream URL for the webcam that you're interested in streaming. To do this, [https://code.google.com/p/bigbluebutton/wiki/ClientConfiguration#Main_parameters enable the client debug log], and open it on the computer that's sharing the webcam. You should find a URL that will look something like

{{{
rtmp://143.54.31.81/video/cbd61416d989a8f69797578769d8110c8b787aa7-1356869148943/160x1201344-1356869184656
}}}

For WebM streaming, you'll want to run in a terminal a command like:

{{{
gst-launch-0.10 rtmpsrc location='rtmp://143.54.31.81/video/cbd61416d989a8f69797578769d8110c8b787aa7-1356869148943/160x1201344-1356869184656 live=1' \
    ! decodebin name=demux threaded=true use-buffering=false ! vp8enc \
    speed=2 max-latency=1 quality=5 max-keyframe-distance=120 threads=8 \
    auto-alt-ref-frames=true tune=1 lag-in-frames=25 ! webmmux streamable=true \
    ! shout2send ip=127.0.0.1 port=8080 mount=stream0
}}}

For H264 (TS/HLS streaming), try something like the following. NOte that you'll have to change the default/fallback streaming format on the web UI to H.264 Baseline prior to starting the stream, since souphttpclientsink doesn't correctly send a stream mime type.

{{{
gst-launch-0.10 rtmpsrc location='rtmp://143.54.31.81/video/cbd61416d989a8f69797578769d8110c8b787aa7-1356869148943/160x1201344-1356869184656 live=1' \
    ! decodebin name=demux threaded=true use-buffering=false \
    ! x264enc bitrate=600 key-int-max=90 profile=main ! mpegtsmux \
    ! souphttpclientsink location=http://localhost:8080/stream0
}}}