#summary How to integrate BigBlueButton 0.8-beta with Matterhorn 1.1

<wiki:toc max_depth="3" />

= Prerequisites =

*Draft* 

You need to have to have installed [08InstallationUbuntu BigBlueButton 0.8] and an installation of Matterhorn 1.1.
Update: Currently, testing for matterhorn 1.2


= Installation of Matterhorn integration =
These instructions will configure your !BigBlueButton 0.8 server to capture the audio, desktop, and webcam from a session.

After each lecture is finished, the Matterhorn ingest and processing scripts (installed on the !BigBlueButton server following the instructions below) will create two video files: one with webcam + audio, the other for desktop sharing, and scp the files to your Matterhorn server.

If you encounter any problems with these instructions, please post to [groups.google.com/group/bigbluebutton-setup/topics?gvc=2 bigbluebutton setup mailing list].


== 1. Install ffmpeg  == 

To install ffmpeg, login to your !BigBlueButton server with root access.  Copy the following script and and save as a file  `install_ffmpeg.sh` on your server

{{{
# install dependencies
sudo apt-get install build-essential git-core checkinstall yasm texi2html libfaac-dev libopencore-amrnb-dev libopencore-amrwb-dev libsdl1.2-dev libtheora-dev libvorbis-dev libx11-dev libxfixes-dev libxvidcore-dev zlib1g-dev

# Install x264
cd /usr/local/src
sudo git clone git://git.videolan.org/x264
cd /usr/local/src/x264
# Build from a certain commit so installs are consistent
sudo git checkout 392e762151d1657abc8ae5d345c144c3ef280819
sudo git checkout -b 392e762151d1657abc8ae5d345c144c3ef280819
sudo ./configure --enable-static
sudo make
sudo checkinstall --pkgname=x264 --default --pkgversion="3:$(./version.sh | awk -F'[" ]' '/POINT/{print $4"+git"$5}')" --backup=no --deldoc=yes

# Install LAME (optional)
sudo apt-get remove libmp3lame-dev
sudo apt-get install nasm
cd /usr/local/src
sudo wget http://downloads.sourceforge.net/project/lame/lame/3.98.4/lame-3.98.4.tar.gz
sudo tar xzvf lame-3.98.4.tar.gz
cd /usr/local/src/lame-3.98.4
sudo ./configure --enable-nasm --disable-shared
sudo make
sudo checkinstall --pkgname=lame-ffmpeg --pkgversion="3.98.4" --backup=no --default     --deldoc=yes

# Install FFMPEG
cd /usr/local/src
sudo git clone git://git.videolan.org/ffmpeg
cd /usr/local/src/ffmpeg
sudo git checkout n0.8.1
sudo git checkout -b n0.8.1
sudo ./configure --enable-gpl --enable-version3 --enable-nonfree --enable-postproc --enable-libfaac --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libtheora --enable-libvorbis --enable-libx264 --enable-libxvid --enable-x11grab --enable-libmp3lame
sudo make
sudo checkinstall --pkgname=ffmpeg --pkgversion="8:$(./version.sh)" --backup=no --deldoc=yes --default

hash x264 ffmpeg ffplay ffprobe
sudo make tools/qt-faststart
sudo checkinstall --pkgname=qt-faststart --pkgversion="$(./version.sh)" --backup=no --deldoc=yes --default install -D -m755 /usr/local/src/ffmpeg/tools/qt-faststart /usr/local/bin/qt-faststart
}}}


Run the script using the following commands

{{{
chmod +x install_ffmpeg.sh
./install_ffmpeg.sh
}}}

This script will take about thirty minutes to run, depending on your internet connection.

== 2. Install Ingest and Processing package for Matterhorn == 

{{{
   sudo apt-get install bbb-playback-matterhorn
}}}

== 3. Configure the Matterhorn server to accept incoming files == 

The ingest and processing scripts will use a public/private key to move files to the Matterhorn server.  


=== Generate a ssh public key ===

This key will let !BigBlueButton server send files to Matterhorn server without prompting a password. 

{{{
   ssh-keygen -t rsa
}}}

When it asks for a passphrase, just press enter (we don’t want to be prompted for a password). The public key will be generated in `/home/firstuser/.ssh/id_rsa.pub`.


Next, we'll copy the public key to the !BigBlueButton scripts directory change it’s permissions to 600 (otherwise, the publish script will fail to push the recording to the Matterhorn server).

{{{
sudo cp ~/.ssh/id_rsa /usr/local/bigbluebutton/core/scripts/matt_id_rsa
sudo chmod 600 /usr/local/bigbluebutton/core/scripts/matt_id_rsa
sudo chown tomcat6:tomcat6 /usr/local/bigbluebutton/core/scripts/matt_id_rsa
}}}

Set configuration parameters about !BigBlueButton-Matterhorn connection in `/usr/local/bigbluebutton/core/scripts/matterhorn.yml`

These parameters will be read during publish phase.


{{{
# The ip address of the matterhorn server.
server: 192.168.0.147
# The username we use to SCP the processed recording to matterhorn.
user: root
# The private key to use to SCP into matterhorn
key: /usr/local/bigbluebutton/core/scripts/matt_id_rsa
# The directory in the matterhorn server where the
# processed recording will be delivered for publishing to matterhorn.
# NOTE: Make sure that the directory is writeable by the above user.
inbox: /opt/matterhorn/felix/inbox/
}}}

In Matterhorn server

Create a directory for ssh  keys
{{{
sudo mkdir /root/.ssh
}}}
Create a file for authorized keys (only if it does not exist)
{{{
sudo nano /root/.ssh/authorized_keys
}}}
Add the public key generated in !BigBlueButton server to authorizes keys in Matterhorn server.
Copy the content of  the file 
`/home/firstuser/.ssh/id_rsa.pub` that is located in !BigBlueButton server to `/root/.ssh/authorized_keys` in Matterhorn server

=== Test SSH Connection ===
You can do a small test for checking the ssh connection by running a remote command, for example you can use the `ls` command and list the files inside the matterhorn folder

{{{
sudo -su tomcat6 ssh -i /usr/local/bigbluebutton/core/scripts/matt_id_rsa  -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o CheckHostIP=no root@192.168.0.147 'ls /opt/matterhorn/felix/'
}}}

Now ingestion should work during the publish phase.


=== About Matterhorn ingestion ===
 * By default the directory where zipped packages are ingested in Matterhorn server is `$FELIX_HOME/inbox`

To change inbox directory, change the parameter `felix.fileinstall.dir`  in `/opt/matterhorn/1.1.0/docs/felix/load/org.apache.felix.fileinstall-inbox.cfg`

 * A zipped package is deleted from inbox after it is ingested
 
 * If the zipped package  sent from !BigBlueButton is not a valid media package it is sent to `${org.opencastproject.storage.dir}/files/collection` where `org.opencastproject.storage.dir` is a parameter configured in `$FELIX_HOME/conf/config.properties`

= Your First Recording =  
Open the home page on the !BigBlueButton server. For example:
{{{
   http://192.168.0.35/
}}}

Click "View API Examples".  Click "Record (Matterhorn)".  Fill out the entry for the meeting.

http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/matterhorn/matt1.png

Create and Start the !BigBlueButton Session. Now:
 * Join to the voice conference
 * Start the webcam
 * Start desktop sharing

http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/matterhorn/matt2.png

When you are done presenting logout from the conference. After a couple of minutes the process and publish phase will start and it will send a zip file with the files necessary for matterhorn to process. You can check in the logs of matterhorn when the zip file is being processed:

http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/matterhorn/matt3.png

After matterhorn finish processing the zip file, you will be able to reproduce the playback from the matterhorn server:

http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/matterhorn/matt4.png

= Troubleshooting =

You can check the logs of recording in the bigbluebutton server: `/var/log/bigbluebutton`

= Getting Help =

If you have any problems not answered by this document, or you have questions/feedback/bugs, please post to [http://groups.google.com/group/bigbluebutton-setup/topics?gvc=2 bigbluebutton-setup].