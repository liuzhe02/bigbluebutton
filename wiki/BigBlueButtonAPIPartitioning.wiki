_This document is a draft for the Bigbluebutton API partitioning  development, it contains material related to design and work progress for the API Partitioning._

= Introduction =

The goal for the API partitioning initiative is to provide API interfaces to enable a Third Party application make calls for different Bigbluebutton modules. 

An example would be, starting or stopping the chat module or the presentation module from the 3rd party applications and being bale to access functionalities related to the loaded module(s). 


= Details =

To review the changes and try out the API partitioning you can check out the code from the API branch [https://github.com/nnoori/bigbluebutton/tree/API here]. Details of how to checkout the code and compile the pieces associated with API will come later on this page. 

_Warning: we are at a very early stages of the API partitioning development, so the code is under ongoing changes and we can't guarantee a total functionality for the system at he moment._

== The API Architecture ==

This section contains a simple diagram of the existing API architecture. The diagram below describes the operation and information exchange for the existing Bigbluebutton API. The current development didn't involve any architectural changes for the API calls. (See digram below)

(Need to insert image here) 


*Use cases:*
 This section lists the use cases or the scenarios for Third Party application API calls.  

 * Load a single BBB module (i.e. load chat module or voice, etc) when a 3rd party application starts.  

 * Load more than one BBB module (i.e. chat & video, chat & presentation) when 3rd party application starts. 

 * Load only one BBB module (i.e. load chat module or voice, etc)  in response to an event from a 3rd party application (mouse click, conf call button, etc) 

 * Load more than one module at different times in response to events from the 3rd party application. Example, click to make a call (load voice module) and later click to start the video or click to start a presentation while calling.


*API Calls suggestions for format:*

For the API calls and response we just followed the orginal format that was used for the BBB API calls but to make things easy we didn't use the checksum (it will be added later for the final version). 

The API standard calls and format can be found on the [API] page at the [http://code.google.com/p/bigbluebutton/wiki/API#API_Calls API Calls] section. 

*Checkout the code and try out the API's*

To check out the code you can go to [https://github.com/nnoori/bigbluebutton/tree/API here] and check out the API branch. 

After checking out the code, follow the steps for building and deploying the different pieces that are related to the API and here is how: 

 # bigbluebutton-client part, follow the instructions on how to build and run the client code as described on the [DevelopingBBB] page at the [http://code.google.com/p/bigbluebutton/wiki/DevelopingBBB#Working_on_the_Client_side here]
 # bbb-common-message, follow the instructions on the the [DevelopingBBB] page the [ here] to build and resolve libs.
 # bigbluebutton-apps, follow the instructions on how to build and run the client code as described on the [DevelopingBBB] page the [ here]
 # bigbluebutton-web, follow the instructions on how to build and run the client code as described on the [DevelopingBBB] page at the [http://code.google.com/p/bigbluebutton/wiki/DevelopingBBB#BigBlueButton_Web here]


*How to try out the code*

Here are the available API calls so far:

 * You can load up, start and stop the chat module for the Bigbluebutton within the Bigbluebutton client canvas so far (we are aiming to load each module in its own frame independently)
 
   * To start Chat Module use
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=ChatModule&cmd=start}}}

   * To stop Chat Module use
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=ChatModule&cmd=stop}}}

 * You can load up, start and stop the presentation module for the Bigbluebutton within the Bigbluebutton client canvas so far (the same goes for aiming to load independently) 
  
    * To start Presentation Module use
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=ChatModule&cmd=start }}}

    * To stop Presentation Module use
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=ChatModule&cmd=stop }}}

To try out the API calls follow these steps:

 # Start you Bigbluebutton server. 
 # Call the Bigbluebbutton welcome page (i.e. http://YOUR_IP/), Bigbluebutton welcome page should come up with only Listers and Viewers windows.
 # Open another browser window and paste the link associated with the action you want (i.e. start chat, stop chat, etc) basically we are sending an HTTP POST to call the method.


*Potential Problems*

 * When building the client make sure that the /tools/ directory exists otherwise the client won't build. This tends to happen if you are developing Bigbluebutton client code outside the VM environment. 

 * Another problem associated with deploying the bigbluebutton-web: you have to call ‘ant war’ command for you bigbluebutton-web and then deploy the resulted war file
 # Rename created file: bigbluebutton-0.71dev.war to bigbluebutton.war
 # Delete file bigbluebutton.war and directory bigbluebutton under /var/lib/tomcat6/webapps/
 # Copy the new bigbluebutton.war to /var/lib/tomcat6/webapps/
 # Re-start the Tomcat server.


_Note: Any comments or input is more welcome to improve our work_

_To be added_