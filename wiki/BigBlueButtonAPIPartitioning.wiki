#summary BigBlueButton API partitioning design and roadmap

_This document is a draft for the Bigbluebutton API partitioning  development, it contains material related to design and work progress for the API Partitioning._

= Introduction =

The goal for the API partitioning initiative is to provide API interfaces to enable a Third Party application make calls for different Bigbluebutton modules. 

An example would be, starting or stopping the chat module or the presentation module from the 3rd party applications and being bale to access functionalities related to the loaded module(s). 


= Details =

To review the changes and try out the API partitioning you can check out the code from Coral CEA repository  [https://github.com/coralcea/bigbluebutton here]. Details of how to checkout the code and compile the pieces associated with API will come later on this page. 

_Warning: we are at a very early stages of the API partitioning development, so the code is under ongoing changes and we can't guarantee a total functionality for the system at he moment._

== The API Architecture ==

This section contains a simple diagram of the existing API architecture. The diagram below describes the operation and information exchange for the existing Bigbluebutton API. The current development didn't involve any architectural changes for the API calls. (See digram below)



<img src="http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/API_PART/BBB_API.jpg" />

_Add more details and update the images for loading 2 modules etc_
_Also need to explain the JMS message systems and structure and more details about the "moduleCommand" API call_

*Use cases:*
 This section lists the use cases or the scenarios for Third Party application API calls.  

 * Load a single BBB module (i.e. load chat module or voice, etc) when a 3rd party application starts.  

 * Load more than one BBB module (i.e. chat & video, chat & presentation) when 3rd party application starts. 

 * Load only one BBB module (i.e. load chat module or voice, etc)  in response to an event from a 3rd party application (mouse click, conf call button, etc) 

 * Load more than one module at different times in response to events from the 3rd party application. Example, click to make a call (load voice module) and later click to start the video or click to start a presentation while calling.


*API Calls suggestions for format:*

For the API calls and response we just followed the orginal format that was used for the BBB API calls but to make things easy we didn't use the checksum (it will be added later for the final version). 

The API standard calls and format can be found on the [API] page at the [http://code.google.com/p/bigbluebutton/wiki/API#API_Calls API Calls] section. 

*Checkout the code and try out the API's*

You can check out the code for the API partitioning from the following repository {{{ git://github.com/coralcea/bigbluebutton.git }}} and here are the steps to checkout the code:

 # Create a directory to check out your code there, such as "/bigbluebutton_api/".
 # Run command `git init` to initialize the directory as a local git repository.
 # Clone the main repository {{{ git://github.com/coralcea/bigbluebutton.git }}} by using the command `git clone git://github.com/coralcea/bigbluebutton.git`.
 

After checking out the code, follow the steps for building and deploying the different pieces that are related to the API and here is how: 

 # bigbluebutton-client part, follow the instructions on how to build and run the client code as described on the [DevelopingBBB] page at [http://code.google.com/p/bigbluebutton/wiki/DevelopingBBB#Working_on_the_Client_side here]
 # bbb-common-message, follow the instructions on the the [DevelopingBBB] page [http://code.google.com/p/bigbluebutton/wiki/DevelopingBBB#BigBlueButton_Commons_Libraries here] to build and resolve dependencies (i.e copy required .jar files for BBB).
 # bigbluebutton-apps, follow the instructions on how to build and run the client code as described on the [DevelopingBBB] page [http://code.google.com/p/bigbluebutton/wiki/DevelopingBBB#BigBlueButton_Apps here]
 # bigbluebutton-web, follow the instructions on how to build and run the client code as described on the [DevelopingBBB] page  [http://code.google.com/p/bigbluebutton/wiki/DevelopingBBB#BigBlueButton_Web here]


*How to try out the code*

Here are the available API calls so far:

 * Before starting anything you have to create a meeting room by calling the "create" API call. This should bring up the Bigbluebutton Demo page (see below), then you can log in. 

<img src="http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/API_PART/BBB-API-DemoScreen.jpg" />

  * After logging in the Bigbluebutton client will load all the Bigbluebutton modules but  only 2 frames will be shown (Listeners and Viewers)(See image below). The rest of the modules (i.e. Chat, Presentation, Video, and Voice) are not started until a command is sent to start or stop. 

<img src="http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/API_PART/BBB-API-MainScreen.jpg" />

   * You can start and stop the chat module for the Bigbluebutton within the Bigbluebutton client canvas so far (we are aiming to load each module in its own frame independently)
 
   * To start Chat Module use (see image for Chat module started only) 
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=ChatModule&cmd=start}}}

<img src="http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/API_PART/BBB-API-Chat Module started.jpg" />

   * To stop Chat Module use
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=ChatModule&cmd=stop}}}

 * You can load up, start and stop the presentation module for the Bigbluebutton within the Bigbluebutton client canvas so far (the same goes for aiming to load independently) 
  
    * To start Presentation Module use (see image for Presentation module started only)
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=PresentModule&cmd=start }}}

<img src="http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/API_PART/BBB-API-Presentaion Module started.jpg" /> 

    * To stop Presentation Module use
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=PresentModule&cmd=stop }}}

   * To start Voice Module use
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=dummy&cmd=init_voice}}} , then you can click the "Headset" button to join or leave a voice conference.

   * To start Video Module use
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=dummy&cmd=init_video}}} , the click on the "Camera" button to start your video.

   * All Modules wildcard API Call(s): To make the call for starting or stop all the module use the command 

{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=All&cmd=<start/stop> }}}  


To try out the API calls follow these steps:

 # Start you Bigbluebutton server. 
 # Call the Bigbluebbutton welcome page (i.e. http://YOUR_IP/), Bigbluebutton welcome page should come up with only Listers and Viewers windows.
 # Open another browser window and paste the link associated with the action you want (i.e. start chat, stop chat, etc) basically we are sending an HTTP POST to call the method.

*How to add a new API command*

_To Do_

* Changes on the API web-app side

Files involved:

 # bigbluebutton-web/grails-app/controllers/org/bigbluebutton/web/controllers/ApiController.groovy
 # bigbluebutton-web/grails-app/conf/spring/resources.xml
 # bigbluebutton-web/src/groovy/org/bigbluebutton/api/IApiConferenceEventListener.groovy
  

* Changes on the bbb-common-message side

Files involved:

 # bbb-common-message/src/main/groovy/org/bigbluebutton/conference/IRoomListener.groovy
 # bbb-common-message/src/main/groovy/org/bigbluebutton/conference/Room.groovy



* Changes on the Client side

 # bigbluebutton-client/src/org/bigbluebutton/main/maps/ApplicationEventMap.mxml


* Changes on the Server side (i.e. red5) 
Files involved:

 # bigbluebutton-apps/src/main/webapp/WEB-INF/bbb-apps.xml







*Potential Problems*

 * When building the client make sure that the /tools/ directory exists otherwise the client won't build. This tends to happen if you are developing Bigbluebutton client code outside the VM environment. 

 * Another problem associated with deploying the bigbluebutton-web: you have to call ‘ant war’ command for you bigbluebutton-web and then deploy the resulted war file
 # Rename created file: bigbluebutton-0.71dev.war to bigbluebutton.war
 # Delete file bigbluebutton.war and directory bigbluebutton under /var/lib/tomcat6/webapps/
 # Copy the new bigbluebutton.war to /var/lib/tomcat6/webapps/
 # Re-start the Tomcat server.

NOTE: 
 * In case of using the command 
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=VideoconfModule&cmd=start }}} will result starting multiple instances of the BBB the video module which reults having multiple Camera buttons on the toolbar and will not start a new Webcam window. 
 * Using the command 
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=VideoconfModule&cmd=stop }}} results disabling the Camera button(s) and killing (closing) the Webcam view window.

 * In case of using the command 
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=PhoneModule&cmd=start }}} will reult it will show the Headset button on the toolbar

 * Using the command 
{{{http://YOUR_IP_ADDRESS/bigbluebutton/api/moduleCmd?meetingID=Demo+Meeting&module=phoneModule&cmd=stop }}} will kill (removes) the Headset button from the toolbar.



_Note: Any comments or input is more welcome to improve our work_

_To be added_