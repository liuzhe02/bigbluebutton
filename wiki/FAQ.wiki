#summary BigBlueButton Frequently Asked Questions
#labels Phase-Support

<wiki:toc max_depth="3"/>

----

= Welcome =

Welcome to the !BigBlueButton project's Frequently Asked Questions (FAQ). 

We (the [#BigBlueButton_Committer core developers]) created this FAQ to quickly answer common questions around installation, configuration, and using !BigBlueButton.  If you are a developer, you'll also find lots of answers herein that have been collected from discussions on our mailing lists.

== What if I don't find my answer here? ==

The !BigBlueButton community focuses its support in three mailing lists, each hosted by Google Groups.  Each group focuses on a different topic of questions:

  * [http://groups.google.com/group/bigbluebutton-setup/topics?gvc=2 bigbluebutton-setup] -- Setup, installation, and configuration questions, such as "How do I configure the !BigBlueButton client?"
  * [http://groups.google.com/group/bigbluebutton-users/topics?gvc=2 bigbluebutton-users] -- End user questions, such as "How do I do X with !BigBlueButton?"
  * [http://groups.google.com/group/bigbluebutton-dev bigbluebutton-dev] -- All other questions, such as "How do I integrate !BigBlueButton with application Y?"

The developer mailing list has over 1000 users, so before you post:

  # Scan the FAQ to see if your question is answered herein.
  # Use Google to search for keywords related to your question -- there's a good chance someone might have already asked your question in the Google groups.
  # If you think you've found a bug, check the [http://code.google.com/p/bigbluebutton/issues/list issues database].  

All of the core !BigBlueButton contributors subscribe to all three mailing lists.  Please don't cross post.


== Why is this project called !BigBlueButton? ==
The name comes from the goal of making the process to setup a virtual classroom as easy as pressing a (metaphorical) big blue button.

== Why is it spelled !BigBlueButton (and not Big Blue Button)? ==
The trademark is written as one word !BigBlueButton.  Doing so makes it easy for others to use Google to search for information about the project.

== Where is the source? ==
We host the source on [http://github.com/bigbluebutton/bigbluebutton GitHub]. We used to host it on Google Code, but we moved to !GitHub in 2010 to make it easier for others to fork and contribute.

== What is the open source license used in !BigBlueButton? ==
We use the LGPL license.  Some of the open source components we build on use different licenses, such as red5phone uses the GPL license.

== Where can I find examples of people running !BigBlueButton? ==
We currently don't keep a list of organizations, colleges/universities, and hosting providers who run !BigBlueButton.   In twelve months prior to June 2012, the project had over [http://www.bigbluebutton.org/2012/07/06/bigbluebutton-is-a-global-project/ sixty thousand installs].

If you'd like examples and use cases of people running !BigBlueButton, feel free to ask the members of the [http://groups.google.com/group/bigbluebutton-users bigbluebutton-users] or [http://groups.google.com/group/bigbluebutton-setup bigbluebutton-setup] mailing lists.


== Will !BigBlueButton always stay open source? ==
Yes. 

We started !BigBlueButton as an open source project, and we intend to keep it that way. One of the main goals we had was to create a large open source community around the project. To further this goal, we are in the process of putting together an [http://www.bigbluebutton.org/2010/07/12/bigbluebutton-foundation/ independent not-for-profit !BigBlueButton organization] (similar to the Eclipse Foundation) to oversee and accelerate the growth of the  !BigBlueButton project. 

= !BigBlueButton Development Process =
As of June 2012, the !BigBlueButton project had [http://www.bigbluebutton.org/2012/07/06/bigbluebutton-is-a-global-project/ 61,000 installs worldwide].  This is a big step since 2008, when the software had just one install at [http://www.bigbluebutton.org/history/ Carleton University].

Today, there is a very active !BigBlueButton community comprising of over +1200 members on the developer mailing list.  These members, users, developers, educational institutions, and commercial companies -- all are benefiting from improvements to the product.

As with any open source project, the continued growth of the community depends on the quality of the software.  The quality of the software, in turn, depends on the process we use to build a release.
 
== Development Priorities ==

The core group of !BigBlueButton committers have adopted an open source development process with the following priorities (in order):

  * Stability
  * Usability
  * Features
  * Modularity

It cannot be overstated that the project's focus is primarily on stability.  For a university or college to deploy !BigBlueButton for live classes, or for a commercial company to embed !BigBlueButton into their product, the software has to be extremely stable. 

Usability ranks a close second.  Without a simple-to-use interface, !BigBlueButton would not be adopted, nor viewed as a compelling alternative to more complex closed-source equivalents.

Achieving stability is no easy task.  !BigBlueButton itself is a very complex system, comprising over 14 open source projects, with sub-systems responsible for sharing of slides, video, audio, text, and desktop sharing.  The stability of the product today is a direct result of the committers, the development process, and the community all working together.  We release on quality, not dates.

Richard Alam is the creator of !BigBlueButton and the chief architect.  As such, Richard has the overall responsibility for the core architecture and (like Linus with Linux) reviews many of the contributions from others.

Fred Dixon serves as the project manager.  His responsibility includes managing the overall release process, coordinating the building and packaging of each release, and communicating with the community on the progress of the release. 

There have been ten releases of !BigBlueButton to date.

== !BigBlueButton Development Process ==

Each release cycle goes according to the following steps:

=== 1. Planning ===

In the past, the committers held a meeting to decide on the main features for a release.  You can see a recording of the recent committer meeting [http://code.google.com/p/bigbluebutton/wiki/RoadMap here].

During the meeting, the committers would review the [http://code.google.com/p/bigbluebutton/wiki/RoadMap1dot0 BigBlueButton Road Map] according to the following criteria:

  # What items on the road map are important for our target market (distance education)?
  # What refactoring/features do the core committers believe are necessary to improve the code base/maintainability/usability of the project?
  # What features are our community asking to implement (specifically, those not related to our target market, like control of remote desktop)?

The !BigBlueButton Road Map is the key document for discussion, along with the issue tracking system, where we track, amongst others, all [http://code.google.com/p/bigbluebutton/issues/list?can=2&q=label:Stability&colspec=ID+Type+Status+Priority+Milestone+Owner+Component+Summary&x=priority&y=component&mode=grid&cells=tiles stability] and [http://code.google.com/p/bigbluebutton/issues/list?can=2&q=label:Usability&colspec=ID+Type+Status+Priority+Milestone+Owner+Component+Summary&sort=&mode=grid&y=Component&x=Priority&cells=tiles&nobtn=Update usability] issues.

 
=== 2. Design ===

At this point, each feature for the release is assigned an issue in the !BigBlueButton Issue Tracker (if it does not already have one).  This allows the community to track the progress of each release.  For example, to track the progress for 0.81, see [http://code.google.com/p/bigbluebutton/issues/list?can=2&q=milestone=Release0.81 list of issues tagged for 0.81].

For small features, especially bug fixes, the associate issue provides a sufficient record for coordinating and tracking the development effort.

For more complex features, such as record and playback, API changes, or creation of an HTML5 client, the lead developer for the feature, would post specifications to !BigBlueButton-dev for review and comment.  

For examples of previous posts, see:

  * [https://groups.google.com/group/bigbluebutton-dev/browse_thread/thread/c214cbe9bdb2268a 0.80 API changes]
  * [https://groups.google.com/group/bigbluebutton-dev/browse_thread/thread/c17afb3e850b185a HTML5 Client Architecture]
  * [https://groups.google.com/group/bigbluebutton-dev/browse_thread/thread/d36ba6ff53e4aa79 Feature for pre-upload of documents]
            	
 
=== 3.  Development ===

During the development phase, the committers hold bi-weekly (and sometimes weekly) calls as development proceeds towards beta.

Each committer works on a fork of the !BigBlueButton Master.  When a feature is ready for commit, the committer sends a pull request to merge the work into the Master branch.   Since the core group is still small and the committers are communicating during development, Richard and others know when any major pull requests are coming.

*Note:* Not every request needs to be reviewed by Richard.  If a committer is working on an area of their expertise, then they can usually commit to Master.   In general, any commit that has substantial changes are reviewed by the committer who is an expert on that area of the system and by Richard.

The submitter of the pull request is responsible for ensuring the feature works correctly against Master.  For pull requests that make major changes, the submitter must provide with the pull request additional documentation to make it easy for others to review:

  * What the code does (with reference to the associated issue)
  * What changes were made to implement the feature/fix the bug
  * Document of design changes

If the reviewer of the update believes it will negatively affect stability or usability, the request will be rejected and the developer will need to rework the request based on feedback by the reviewer.

Once an update has been committed, it is tested by other developers.

Once a release is moved to beta, the public packages are updated so others can begin beta testing.
 
=== 4.  Beta Testing ===

Once all features have been implemented and all major bugs have been fixed, the release moves to beta.  

Before the beta release, the documentation for installation, setting up of the development environment, and overview of new features are all updated for the release.  For example:

  * [http://code.google.com/p/bigbluebutton/wiki/081SettingDevEnvironment 081SettingDevEnvironment]
  * [http://code.google.com/p/bigbluebutton/wiki/081InstallationUbuntu 081InstallationUbuntu]
  * [http://code.google.com/p/bigbluebutton/wiki/081Overview 081Overview]
  * [http://code.google.com/p/bigbluebutton/wiki/081RecordAndPlayback 081RecordAndPlayback]

The product will go through one (or more) betas until the community reports no more major bugs.  Additional work that occurs during this phase includes:

  * [http://code.google.com/p/bigbluebutton/wiki/LocalizationOfBBB Localization] of the product
  * Updating and fixing documentation
  * Updating packaging so it installs without errors on 64-bit, both on a new install and an upgrade from a previous version

When all the bugs are fixed and issues are closed, the product moves to Release Candidate. 

=== 5.  Release Candidate ===

Stability is paramount for reaching a release candidate build.   

Again, depending on feedback from the community, the committers monitor the mailing lists looking for any final bugs or issues that would negate the general release.

Many times we’ll be asked during beta and release candidates what is the release date for !BigBlueButton.  Our motto is “we release on quality, not dates.”
 
=== 6.  General Release ===

After a (roughly) two week period in which no one has reported any issues for a release candidate, the committers change the label (such as 0.80-RC3 to 0.80) and announce the release (sample [https://groups.google.com/forum/#!msg/bigbluebutton-dev/80rKs0RiyUU/TYxi-3ucowsJ release announcement]).

 






= Contributing to !BigBlueButton =

== How can I contribute? == 
!BigBlueButton exists because many developers have contributed their time and expertise to its development.  

At first glance at the underlying architecture, !BigBlueButton may seem complex, but it's not really once you get to know the system.  The !BigBlueButton client is written in !ActionScript.  The !BigBlueButton server components are written in a combination of Java, grails, and scala.  You don't need to learn all these languages to help out, but you should be very comfortable programming in Java as !ActionScript, grails, and scala are all similar to Java.

Before you can contribute as a developer, you need to invest some time into understanding !BigBlueButton's [ArchitectureOverview architecture], [OpenSourceComponents components], and how to setup a [DevelopingBBB development environment].  The source code for !BigBlueButton is hosted at [https://github.com/bigbluebutton/bigbluebutton github], so you'll need to understand how [http://progit.org/ it works] and the workflow for distributed software development.  

Like other open source projects, a good place to start is to try fixing an [http://code.google.com/p/bigbluebutton/issues/list open issue].  We've tagged a few issues as [http://code.google.com/p/bigbluebutton/issues/list?q=label:FirstProject FirstProject] to make it easy for you to find those issues that are both (relatively simple) to fix, but would be meaningful to !BigBlueButton.

You can also browse the bugs by labels: [http://code.google.com/p/bigbluebutton/issues/list?can=2&q=label:Stability&colspec=ID+Type+Status+Priority+Milestone+Owner+Component+Summary&x=priority&y=component&mode=grid&cells=tiles Stability] - [http://code.google.com/p/bigbluebutton/issues/list?can=2&q=label:Usability&colspec=ID+Type+Status+Priority+Milestone+Owner+Component+Summary&sort=&mode=grid&y=Component&x=Priority&cells=tiles&nobtn=Update Usability] - [http://code.google.com/p/bigbluebutton/issues/list?can=2&q=label:Performance&colspec=ID+Type+Status+Priority+Milestone+Owner+Component+Summary&x=priority&y=component&mode=grid&cells=tiles Performance] - [http://code.google.com/p/bigbluebutton/issues/list?can=2&q=component=Localization&colspec=ID%20Type%20Status%20Priority%20Milestone%20Owner%20Component%20Summary Localization] - [http://code.google.com/p/bigbluebutton/issues/list?can=2&q=label:Type-Research&colspec=ID+Type+Status+Priority+Milestone+Owner+Component+Summary&x=priority&y=component&mode=grid&cells=tiles Research].  You could also try tackling one of the [http://code.google.com/p/bigbluebutton/issues/list?can=2&q=type=Enhancement enhancements] to !BigBlueButton.

Some bugs are more important than others.  Stability and usability issues are very important to the !BigBlueButton community.

== I'm not a developer, can I still contribute? ==

Dont' worry if you are not a proficient developer -- there are many ways to help out!  You can become proficient in the installation and configuration of a !BigBlueButton server.  Each month, there are many new users in [http://groups.google.com/group/bigbluebutton-setup/topics?gvc=2 bigbluebutton-setup] that need help with setup of !BigBlueButton, especially setup  [Can_I_provide_external_access_to_a_BigBlueButton_server_behind_m work behind a firewall].    You can [LocalizationOfBBB contribute a language file].  Or you can become an editor of the wiki pages to help provide documentation in a specific area, such as setup of !BigBlueButton on [InstallingBigBlueButtonFreeBSD FreeBSD].   Such assistance  reduces the support load on us and gives us more time to work on improving !BigBlueButton.  

== !BigBlueButton Committer ==

Like many open source projects, at the core of the developer team is a small group that have commit rights and the overall responsibility for the quality of the project.  The committers are as follows:

Active Committers: 
  * Richard Alam, Lead Architect
  * Marco Calderon, Server
  * Felipe Cecagno, Client
  * Fred Dixon, Project Manager
  * Tiago Jacobs, red5
  * Chad Pilkey, Client
  * Gustavo Salazar, Record and Playback

Past Committers (fondly remembered):
  * Jeremy Thomerson, API
  * Denis Zgonjanin, Client

The committers have earned this responsibility through years of effort
working on !BigBlueButton and related open source projects (i.e. red5).  In particular, we very much respect Richard's four year-plus effort to create !BigBlueButton.  As the Lead Architect for this project, he has the final say. 

The committers are very active in the support and mentoring of other developers in the [http://groups.google.com/group/bigbluebutton-dev/topics?gvc=2 bigbluebutton-dev] mailing list and, recently, in the 2010 Google Summer of Code (Google paid for two students to work on the project).  

The committer's group is not closed.  Any developer that wishes to become a committer can achieve it through participation.  The decision of expanding the committers group rests with the committers.  

Any source code you submit for inclusion into !BigBlueButton will be reviewed by one (or more) of the committers.   The process for submission and review depends on the complexity of the contribution and requires that you have signed a Contributor License Agreement.  

== Why do I need to sign a Contributor License Agreement to contribute source code? ==

Before we can accept contributions as an open source project, we need to ensure there isn't any ambiguity on the ownership of material committed to the project.  Therefore, before we can incorporate your code, we need to have a Contributor License Agreement in place.  For background on our reasons for doing this, please see http://www.oss-watch.ac.uk/resources/cla.xml.

We've adopted to use the Sun Microsystems Contributer Agreement (yes, we know they are now Oracle, but we're using the agreement that Sun had published) as it provides for joint ownership.  Except as set out in the agreement, you (and your employer if you have an intellectual property agreement in place) keep all right, title, and interest in your contribution.  

Please read over the [http://bigbluebutton.googlecode.com/files/Contributor%20Agreement.pdf Contributor Agreement] and, if you (and your employer) are in agreement with its terms, then sign, scan, and e-mail a copy back to Fred Dixon (ffdixon at bigbluebutton _dot_ org).  Note: The agreement is currently between you (and your employer) and Blindside Networks.  When the [http://bigbluebutton-blog.blogspot.com/2010/07/bigbluebutton-foundation.html BigBlueButton foundation] launches, Blindside Networks will assign these agreements to the foundation.

Once we receive the signed Contributor Agreement, we can review your submission for inclusion in !BigBlueButton.  The process for submission depends on whether it's fixing a bug (submitting a patch) or whether it's an enhancement (submitting a feature).

=== Submission of a patch ===
If you want to contribute a patch to !BigBlueButton, your chances of acceptance are *greatly* improved if the following are true:

  # You are an active participant in [http://groups.google.com/group/bigbluebutton-dev/topics?gvc=2 bigbluebutton-dev] and have demonstrated an understanding of the product by helping others and participating in discussions on other patches.
  # Your patch fixes an [http://code.google.com/p/bigbluebutton/wiki/IssuesInstructions?tm=3 open issue]. 
  # Before submitting your patch, you have announced your intent to bigbluebutton-dev and invited discussion from others.
  # You have received positive feedback from a committer on your intent.

The ideal patch submission has all the above true, which essentially means you have built a relationship of trust with other !BigBlueButton developers and have been visible on your willingness to contribute your skills to the project.  

There are a number of *must haves* for your submission to be accepted.

  # You have forked !BigBlueButton on !GitHub and submitted the patch as a pull request (this makes it *much* easier for a committer to review and incorporate your patch).
  # You have signed a [http://code.google.com/p/bigbluebutton/wiki/FAQ#How_do_I_contribute_my_updates_to_BigBlueButton_? committers agreement] so there is no ambiguity that your contributions may be released under an open source license.
  # Your submission is LGPL (unless it modifies existing code that is under a different license).

Specifically, for using !GitHub, you need to do the following:

  1. [http://help.github.com/fork-a-repo/ Fork] !BigBlueButton on [http://www.github.com/bigbluebutton GitHub]
  1. Create a topic branch - {{{git checkout -b my_branch}}}
  1. Push to your branch - {{{git push origin my_branch}}}
  1. Create a [http://help.github.com/pull-requests/ Pull Request] from your branch

!GitHub provides some good [http://help.github.com/ help] in the above steps, and there is an excellent [http//progit.org/ Pro Git] book by Scott Chacon available on-line.

=== Submission of a feature ===
Some of the items in our issue tracker are enhancements to the core product.  If you are interested in contributing an enhancement, your chances of acceptance are *greatly* improved if the following are true:

  # You have had patches accepted by a committer.
  # You have posted a Request for Comments to the bigbluebuton-dev mailing list signaling your willingness to work on the enhancement.  In your post, you have provided (at minimum) the following:
    * An overview of the design and implementation of your feature.  For examples see: [http://groups.google.com/group/bigbluebutton-dev/browse_thread/thread/d36ba6ff53e4aa79/91de48842ae1ea75?lnk=gst&q=rfc#91de48842ae1ea75 Proposal for Preupload of Documents]
    * An outline of how you intend to test the enhancement.
    * An estimate of how much time you have to work on the enhancement.
  # A committer has signaled their intent to work closely with you on the enhancement.

Like other open source projects, the participation of a committer is central to the above process as they will take the responsibility for reviewing and signing off on your contribution. 


=== Testing your submission === 
Depending on the complexity of your patch or feature, it should be accompanied by test cases or, at minimum, a series of steps to test whether the code is functioning properly.  

We are continuously trying to incorporate more automated testing into the !BigBlueButton development process, such as using [http://testng.org/doc/index.html TestNG]. 

We know that the most important part of any submission is the ability for others to test that it works correctly.   Any documentation, sample code, or unit tests that you can provide will greatly reduce the effort of the committer to review your submission.


=== Coding conventions  ===
Take a look at the existing code in !BigBlueButton and follow it as an example of the project's coding and documentation conventions.

For code written in Java, we follow the [http://www.oracle.com/technetwork/java/codeconvtoc-136057.html Java Coding Convention] with minor changes. We will be documenting those changes in this wiki.

For documentation of code method -- especially those classes that provides an API to other classes -- should be documented using the [http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html JavaDoc] format.

For Flex/!ActionScript code, follow the [http://livedocs.adobe.com/flex/3/html/help.html?content=asdoc_1.html AsDoc] format.

= Installation =

== What are the minimum hardware requirements for the !BigBlueButton Server ==
As a minimum, we recommend you run !BigBlueButton on a dedicated quad-core machine with at least 4 GB of memory and a 2.6+ Ghz processor. 

We recommend installing !BigBlueButton on Ubuntu 10.04 64-bit on the server (see [InstallationUbuntu Installing BigBlueButton]).

While the [BigBlueButtonVM BigBlueButton VM] is a good way to try out the system, we recommend you run !BigBlueButton on a dedicated server to reduce audio lag.  In a virtual environment, the !BigBlueButton VM gets only a portion of the host's CPU, and any lag in the CPU cycles can translate to lag in processing VoIP packets.

== What are the minimum bandwidth requirements for the !BigBlueButton Server ==

You'll need good upstream and downstream bandwidth from the server.  We recommend (at least) 100 MBits/second bandwidth in both directions.

== Can I install !BigBlueButton on a shared hosting server, such as !GoDaddy? ==
You need root access to install !BigBluebutton.

If you have a hosting account that only gives you, for example, FTP access and a cPanel/plesk interface, you will not be able to install !BigBlueButton.  

There are a number of OpenSourceComponents in !BigBlueButton that need root access for installation.  These include FreeSWITCH and nginx. The former provides voice conferencing, while the later provides the proxy server for enabling clients to use !BigBlueButton behind a firewall.  See also [FAQ#What_are_the_minimum_hardware_requirements_for_the_BigBlueButton hardware requirements] and [FAQ#What_ports_must_be_open_for_external_users_to_connect_to_BigBlue required ports].

== Can I install !BigBlueButton on EC2? ==

Yes.  Canonical provides official Ubuntu EC2 images for Ubuntu 10.04 64-bit.  To install !BigBlueButton on EC2, do the following: 

  # Modify the default security group in EC2(or create a new security group) so you have port 80, 9123, and 1935 open (see [FAQ#What_ports_must_be_open_for_external_users_to_connect_to_BigBlue FAQ]).
  # Launch a 64-bit "lucid" elastic block storage (EBS) image from Canonical's [http://cloud.ubuntu.com/ami/ list of supported AMI].  We recommend running !BigBlueButton on a c1.medium (or greater CPU) instance.
  # Follow the instructions to install [InstallationUbuntu BigBlueButton 0.80].
  # Use `sudo bbb-conf --setip hostname` to instruct !BigBlueButton to listen to the external DNS name for the EC2 instance (see [http://code.google.com/p/bigbluebutton/wiki/BBBConf bbb-conf]).

The IP addresses for an EC2 image are reset whenever you reboot the image; however, if you assign the EC2 image an elastic IP address, it will have a consistent IP address that will not change on reboot. 

 
== OS Requirements ==


=== Ubuntu ===
As of !BigBlueButton 0.81-beta2, you can install !BigBluebutton on *Ubuntu 10.04 64-bit*. See [InstallationUbuntu Ubuntu packages] using apt-get and Ubuntu packages.  

Please note, that the packages have not been tested on Ubuntu 9.04, Ubuntu 9.10, or Ubuntu 10.10; however, there are [InstallingBigBlueButton step-by-step instructions] for installing !BigBlueButton that you can adapt to these platforms.

If at all possible, install on Ubuntu 10.04.  With a good internet connection, you'll have a full !BigBlueButton server running in about 15 minutes.


=== CentOS ===
There is no support for CentOS.

We do have experience with CentOS.  In April, 2010, we released [http://code.google.com/p/bigbluebutton/wiki/ReleaseNotes#Release_0.64:_Lickety-split BigBlueButton 0.64] with [RPMPackaging RPM Packages] for CentOS 5.4.  However, based on our experience of developing, building, and testing both Ubuntu and CentOS packages, we stopped supporting RPM packages after that release.

Why?  

In a nutshell: quality.  We found it very difficult to test and maintain packaging for both RPM based systems (primarily CentOS) and Ubuntu.  Rather than try to do both and have them "kind of" work, which leads to many, many posts in our forums when users encounter difficulties with an install, we decided to invest heavily in testing and maintaining the Ubuntu packages.  They are now very solid and tested.

If you *really* want support for CentOS, you can contact one of the companies listed at http://bigbluebutton.org/support for commercial support.  Any financial contribution you make to updating CentOS packages will directly benefit other CentOS users in the community.

You can see further discussion on the support for CentOS in  [http://code.google.com/p/bigbluebutton/issues/detail?id=624 issue 624].

=== Windows === 
While technically it should be possible to manually install each of the individual OpenSourceComponents needed to run !BigBlueButton on Windows, we haven't tried it, nor have we tested it.

Don't worry -- using [http://www.vmware.com/products/player/ VMWare Player] you can have a full !BigBlueButton 0.80 server running in under an hour using the [BigBlueButtonVM BigBlueButton Virtual Machine].  The !BigBlueButton VM is running Ubuntu 10.04 32-bit and has all the components pre-installed. 

If you are a brave soul and want to manually install the individual OpenSourceComponents natively on Windows and then install all the !BigBlueButton components, it should be possible.  However, beware, no one who has tried this has lived to post a success message to our mailing list :-).

=== OS X ===
The easiest way to get your own !BigBlueButton server under OS X is to install VMWare Fusion and run the [BigBlueButtonVM BigBlueButton Virtual Machine].  


== Support for Mobile Devices ==

=== Android ===

Work is underway to build a native [http://www.bigbluebutton.org/2011/11/12/bbb-mobile-now-available-on-android-marketplace/ Android client].

=== iOS ===

There is no iOS (iPad or iPhone) !BigBlueButton client.  However, as !BigBlueButton is open source, we believe, like the [Android #Andriod] client, it is only a matter of time before other developers start to create an iOS client.

If you would like to influence or support such development, see [FAQ#When_will_feature_X_be_implemented When will feature X be implemented].



== Bandwidth Requirements ==



=== What are the bandwidth requirements for running a !BigBlueButton server? ===

You'll need good upstream and downstream bandwidth from the server. We recommend (at least) 100 MBits/second bandwidth in both directions.

When sharing a webcam as a moderator, !BigBlueButton lets you select 320x240 or 640x480. Both use the same amount of bandwidth, roughly 30-50 kbytes/second per stream.  Viewers can only share a 320x240 webcam.

For example, if you have a room with 5 users, each sharing their webcam, then you can calculate the bandwidth usage as follows: 

  * Y = 30-50 Kbytes/sec; let's assume 40 Kbytes/sec on average 
  * W = amount of webcams that are streaming 
  * U = amount of users that are watching 

For calculations:
  * server incoming bandwidth: W`*`Y 
  * server outgoing bandwidth: W`*`(U-1)`*`Y  (minus one since a broadcaster does not have to subscribe to his own stream) 

For example, with 5 users in a room with 5 webcams streaming, the bandwidth calculation is as follows:

  * in: 5`*`40 = 200 Kbytes/sec incoming bandwidth needed to the server (e.g. 1.6 Mbit) 
  * out: 5`*`(5-1)`*`40 = 800 Kbytes/sec outgoing bandwidth needed from the server (e.g. 6.4 Mbit) 
  * Total traffic used after one hour: 60 mins`*`60 secs`*`(200 + 800) = 3.6 Gbyte traffic per hour 

If you'd have a typical classroom situation with the presenter broadcasting their webcam to 30 remote students, the calculation is as follows: 

  * in: 1`*`40 = 40 Kbytes/sec incoming (e.g. 0.32 Mbit/sec) 
  * out: 1`*`(30-1)`*`40 = 1160 Kbytes/sec outgoing (e.g. 9.3 Mbit/sec) 
  * Total traffic used after one hour: 60 mins`*`60 secs`*`( 40 + 1160) = 4.3 Gbyte traffic per hour 

If you have 10 of those classes, then your server needs to be able to output 
93 Mbit/sec; that's not much in a LAN, but it's pretty much if you're in a hosted environment.

Large "cafe-style chatroom": 20 viewers, 8 people broadcasting with a 
webcam:  

  * in: 8`*`40 = 320 Kbytes/sec ( 2.5 Mbit ) 
  * out: 8`*`(20-1)`*`40 = 6080 Kbytes/sec ( 48.6 Mbit ) 
  * Total traffic used after one hour: 60 mins`*`60 secs`*`( 320 + 6080 ) = 23 Gbyte traffic per hour 


Sharing slides takes almost no bandwidth beyond the initial uploading/downloading of slides.  When the presenter clicks to show the next slide, the viewers receive a "move next slide" command in their !BigBlueButton client, and they load the next slide from the local cache. Chat has almost no bandwidth as well.

Desktop sharing takes the most bandwidth, and it's dependent on the area chosen by the presenter (full screen and region) and how often their screen updates.  

A VoIP connection to the !BigBlueButton server takes roughly 20 kB/sec per user.  The bandwidth for VoIP grows linearly with number of users.  For example, if there are 20 students in a classroom, then the bandwidth requirements for the server to support VoIP is 20 `*` 20 KBytes/sec = 400 kBytes/sec.


If the presenter has only 100 KByte/second upstream, then performing VoIP, video, and desktop sharing will not fit within that upstream constraint.  In reality, red5/Flash does a good job of using limited bandwidth and actually works quite well.  In the case of desktop sharing, the remote desktops will still receive updates, but the refresh will be much slower than if the presenter was on a LAN (such as within the university or college network).


=== What are the minimum bandwidth requirements for a user? ===

For viewers (students), we recommend users have (at least) 0.5 Mbits/sec -- which is 500 Kbits/sec -- upstream bandwidth, and (at least) 1 Mbits/sec download bandwidth.  

These are not hard and fast numbers, as it depends on the activity of the viewer.  If the viewer is not broadcasting any webcam, the amount of bandwidth would be less than 0.5 Mbits/sec.

A good way for users to check their bandwidth is to visit [http://speedtest.net/ speedtest.net].  The results from speedtest.net give the user's _actual_ bandwidth.   This actual number is important because a user may report that their ISP provides them 0.5 Mbits/sec upstream bandwidth; however, speedtest.net may report an actual number that is much lower.   The difference may be throttling by the ISP and background activity on their computer (such as background downloads, file sharing clients, etc).  

For presenters, we recommend as much upstream bandwidth as possible.  For example, if the presenter shares their desktop, then !BigBlueButton's desktop sharing will attempt to publish their desktop updates as quickly as possible to the server.


== Troubleshooting ==

=== Users on Windows 7 get disconnected after a minute ===

The default config of Windows 7 (and Vista) does "ICMPv6
Router Solicitation" while running the Flash client. Some routers  discard the Teredo packets, thereby causing the !BigBlueButton client to disconnect at regular intervals.  One solution is to disable Teredo packets in the client by entering the following:

{{{
netsh interface ipv6 set teredo disable
}}}

To run this command, you'll need to enter 'cmd' in the program search field (available when you click the start menu).  When you type 'cmd', you'll see the 'command prompt' appear.  Right-click and choose "Run as Administrator".

=== I've tried to install !BigBlueButton on a virtual private server running Ubuntu 10.04, but I'm getting packaging errors during the installation ===
Sometimes the hosting provider for a virtual private server (VPS) has removed the default entries from

{{{
   /etc/apt/sources.list
}}}

The easiest way to solve this is to replace `sources.list` with the standard entries (show below).


{{{
deb http://security.ubuntu.com/ubuntu lucid-security main restricted
deb http://security.ubuntu.com/ubuntu lucid-security multiverse
deb http://security.ubuntu.com/ubuntu lucid-security universe
deb http://us.archive.ubuntu.com/ubuntu/ lucid main restricted
deb http://us.archive.ubuntu.com/ubuntu/ lucid multiverse
deb http://us.archive.ubuntu.com/ubuntu/ lucid universe
deb http://us.archive.ubuntu.com/ubuntu/ lucid-updates main restricted
deb http://us.archive.ubuntu.com/ubuntu/ lucid-updates multiverse
deb http://us.archive.ubuntu.com/ubuntu/ lucid-updates universe
deb-src http://security.ubuntu.com/ubuntu lucid-security main restricted
deb-src http://security.ubuntu.com/ubuntu lucid-security multiverse
deb-src http://security.ubuntu.com/ubuntu lucid-security universe
deb-src http://us.archive.ubuntu.com/ubuntu/ lucid main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ lucid multiverse
deb-src http://us.archive.ubuntu.com/ubuntu/ lucid universe
deb-src http://us.archive.ubuntu.com/ubuntu/ lucid-updates main restricted
deb-src http://us.archive.ubuntu.com/ubuntu/ lucid-updates multiverse
deb-src http://us.archive.ubuntu.com/ubuntu/ lucid-updates universe
}}}

Then, issue a `sudo apt-get update` and try following the install instructions again.


=== I've installed !BigBlueButton using the VM, but I can't access it from a browser ===
Make sure your VMWave Player (or VMWare Fusion) network settings are set to *bridged*, not NAT.  If they were set to NAT and you changed to bridged, you'll need to tell the VM to acquire a network address.  Enter the following command:

{{{
  sudo /etc/init.d/networking restart
}}}

Once you acquire an IP address, you need to change the !BigBlueButton configuration files to use this new IP address.  Don' worry, it's easy to do.   If your new IP address is 47.135.32.64, for example, enter the following command:

{{{
   sudo bbb-conf --setip 47.135.32.64
}}}

=== I get Cannot bind to URL [rmi://0.0.0.0:1099/red5] Exception ===
{{{
   -- Exceptions found in /usr/share/red5/log/* --
/usr/share/red5/log/error.log:java.io.IOException: Cannot bind to URL [rmi://0.0.0.0:1099/red5]: javax.naming.ServiceUnavailableException [Root exception is java.rmi.ConnectException: Connection refused to host: 0.0.0.0; nested exception is:
/usr/share/red5/log/error.log:  java.net.ConnectException: Connection timed out]
/usr/share/red5/log/error.log:  at javax.management.remote.rmi.RMIConnectorServer.newIOException(RMIConnectorServer.java:818) ~[na:1.6.0_20]
/usr/share/red5/log/error.log:Caused by: javax.naming.ServiceUnavailableException: null
/usr/share/red5/log/error.log:Caused by: java.rmi.ConnectException: Connection refused to host: 0.0.0.0; nested exception is:
/usr/share/red5/log/error.log:  java.net.ConnectException: Connection timed out
/usr/share/red5/log/error.log:Caused by: java.net.ConnectException: Connection timed out
/usr/share/red5/log/red5.log:java.io.IOException: Cannot bind to URL [rmi://0.0.0.0:1099/red5]: javax.naming.ServiceUnavailableException [Root exception is java.rmi.ConnectException: Connection refused to host: 0.0.0.0; nested exception is:
/usr/share/red5/log/red5.log:   java.net.ConnectException: Connection timed out]
/usr/share/red5/log/red5.log:   at javax.management.remote.rmi.RMIConnectorServer.newIOException(RMIConnectorServer.java:818) ~[na:1.6.0_20]
/usr/share/red5/log/red5.log:Caused by: javax.naming.ServiceUnavailableException: null
/usr/share/red5/log/red5.log:Caused by: java.rmi.ConnectException: Connection refused to host: 0.0.0.0; nested exception is:
/usr/share/red5/log/red5.log:   java.net.ConnectException: Connection timed out
/usr/share/red5/log/red5.log:Caused by: java.net.ConnectException: Connection timed out
}}}

Start RMI Registry {{{rmiregistry &}}}.

If you still see the error, maybe it's not allowing connection to {{{0.0.0.0}}}. Edit {{{/usr/share/red5/conf/red5.properties}}} and change {{{jmx.rmi.host}}} to the server ip instead of {{{0.0.0.0}}}.





= Configuration =

== What are the minimum requirements for the !BigBlueButton client? ==
Users need a web browser capable of running Flash 10.3.  To check the version of flash, visit [http://kb2.adobe.com/cps/155/tn_15507.html Adobe's Flash Version Check] page.

As of Mac OS X 10.6, Apple stopped updating Flash.  If a Mac user is running an out-of-date version of Flash (!BigBlueButton will check the version of flash), they can upgrade by visiting the  [http://get.adobe.com/flashplayer/ get Flash player] page at Adobe.

To run the desktop sharing, the presenter (and only the presenter) needs to have a Java runtime.  You can test that Java is installed by visiting [http://java.com/en/download/testjava.jsp Java Test Page] (there are download links on this page if you need to install Java).

For bandwidth, we recommend 1Mbits download and 0.5 Mbits upload speed.  Users can test their actual bandwidth using speedtest.net.

For hardware, we recommend a Dual-core CPU with at least 2G of memory.  For Mac, we recommend any Mac running Mac OS X operating system.

*Note*: There is currently an issue with Google Chrome 23 on Mac OS X.  We recommend users run FireFox or Safai until the next release of chrome.

  
== How many simultaneous users can !BigBlueButton support == 

As a rule of thumb, without knowing anything about your server, we recommend running your !BigBlueButton with sessions of twenty-five (25) users or less.  For example, if after testing your server under load, you find it can support 75 simultaneous users, then we recommend running up to three sessions of 25 users, 6 x 12, 12 x 6, etc.  

See [FAQ#What_are_the_minimum_hardware_requirements_for_the_BigBlueButton minimum server requirements] and [https://code.google.com/p/bigbluebutton/wiki/FAQ#What_are_the_minimum_bandwidth_requirements_for_the_BigBlueButto minimum bandwidth requirements].

Of course, there is a big difference between running !BigBlueButton on a single core Celeron CPU vs. a quad core X3450 processor.  The latter will be able to hold more simultaneous users than the former.  

Members of our community periodically host stress tests for !BigBlueButton, which gives others a data point on what a particular server was able to handle.   Take any stress test with a grain of salt.  There are many variables at play:

  * Server: CPU memory, disk space, and bandwidth
  * Usage scenarios (# of webcams and use of desktop sharing)
  * Upstream bandwidth from clients
  * Configuration of !BigBlueButton
  * Version of !BigBlueButton

In !BigBlueButton, each user gets their own dedicated audio channel; the CPU load is the same whether the user is muted or unmuted.  Thus, the scaling factor for determining the number of users a server can support is usually the CPU: the faster the CPU, the higher the simultaneous number of users the server can support with audio.  

We *strongly* recommend you first stress test your own server with a group of users to get real-world data.  

To test your own server, have five people login and have each open multiple browser tabs, each tab logging into !BigBlueButton and joining the audio conference.  With 5 friends, you can simulate 10, 20, 30, etc. users.  We provide [http://code.google.com/p/bigbluebutton/wiki/StressTesting some scripts] to help you launch browsers.  You'll find once the CPU reaches 80%, the audio starts to degrade.  When the audio starts to degrade, you've found the maximum number of users for your server.

If you also want to monitor, there are a number of [http://www.ubuntugeek.com/bandwidth-monitoring-tools-for-ubuntu-users.html tools] for Ubuntu. 

== Where is the admin interface for !BigBlueButton? ==
Early on in !BigBlueButton's development (around 2009), we started to create an admin interface to let administrators create accounts, schedule meetings, configure properties for meetings, etc.  

However, we quickly learned that most installations of !BigBlueButton wanted to do one of the following:

  # Integrate !BigBlueButton within their open source application (Joomla, WordPress, Sakai, etc.) and had no use for an administrative application -- for example, they wanted to do everything from within Joomla.
  # Integrate !BigBlueButton within their custom web application and needed an API control to interact with their sessions (create a session, add a user, end a session, etc).
  # Have a simple stand-alone landing page to create meetings.

As a result, we [FAQ#Is_the_scheduling_interface_in_bbb-web_still_supported? depreciated our administrative/scheduling interface] and focused on creating and supporting [http://www.bigbluebutton.org/open-source-integrations/ open source integrations] for !BigBlueButton with the most popular content management systems, and ensuring there was an [API  API for integration] within other web-based applications.

For a stand-alone landing page, in most cases modifying API demo3.jsp is sufficient.  See [http://code.google.com/p/bigbluebutton/wiki/FAQ#How_do_I_setup_new_classrooms_in_BigBlueButton_? How do I setup new classrooms in BigBlueButton?].





== Voice Conference ==

=== Does !BigBlueButton use Asterisk or FreeSWITCH? ===

!BigBlueButton started using Asterisk in the beginning, but over time we added support for using FreeSWITCH as well.   As of !BigBlueButton 0.8, we stopped testing with Asterisk and now focus on FreeSWITCH.  For reasons see: [http://groups.google.com/group/bigbluebutton-dev/browse_thread/thread/d53494bfa1d4685 Shifting BigBlueButton to using FreeSWITCH].

=== How do I turn off the music on hold when there is only one user in the voice conference? ===
The music on hold is provided by FreeSWITCH.  To disable it, edit `confernece.conf.xml` (you need to edit it as root).

{{{
   sudo vi /opt/freeswitch/conf/autoload_configs/conference.conf.xml
}}}

and change line 139 from

{{{
      <param name="moh-sound" value="$${hold_music}"/>
}}}

to

{{{
      <!--param name="moh-sound" value="$${hold_music}"/ -->
}}}

Then restart !BigBlueButton

{{{
   sudo bbb-conf --restart
}}}

and join an audio session.  You should no longer hear the music on hold.

Note: The above settings became the default as of !BigBlueButton 0.80.


=== How do I configure FreeSWITCH to use 127.0.0.1? ===

When !BigBlueButton starts up bbb-apps-sip (a modified version of [http://code.google.com/p/red5phone/ red5phone]), it attempts to connect to FreeSWITCH using the IP address defined in `/usr/share/red5/webapps/sip/WEB-INF/bigbluebutton-sip.properties`.

{{{
# The address of your FreeSWITCH/asterisk server
sip.server.host=127.0.0.1
sip.server.port=5070
sip.server.username=bbbuser
sip.server.password=secret
}}}

This IP address must match the IP address which FreeSWITCH is listening for incoming SIP calls.  Prior to !BigBlueButton 0.80, the FreeSWITCH attempted to use the server's external IP address; however, this caused [FAQ#Users_do_not_appear_in_the_listeners_window voice connection problems] whenever the external IP address changed (as in rebooting an EC2 instance) or when the server had multiple IP addresses.

To configure FreeSWITCH to use the 127.0.0.1 address (and remove a vector for denial of service attacks), you can make the following changes.

Edit `/opt/freeswitch/conf/vars.xml` and change

{{{
  <X-PRE-PROCESS cmd="set" data="domain=$${local_ip_v4}"/>
}}}

to 

{{{
  <X-PRE-PROCESS cmd="set" data="local_ip_v4=127.0.0.1"/>
  <X-PRE-PROCESS cmd="set" data="domain=$${local_ip_v4}"/>
}}}

Edit `/opt/freeswitch/conf/sip_profiles/external.xml` and change

{{{
    <!--
        DO NOT USE HOSTNAMES, ONLY IP ADDRESSES IN THESE SETTINGS!
    -->
    <param name="rtp-ip" value="$${local_ip_v4}"/>
    <param name="sip-ip" value="$${local_ip_v4}"/>
    <param name="ext-rtp-ip" value="auto-nat"/>
    <param name="ext-sip-ip" value="auto-nat"/>
}}}

to

{{{
    <!--
        DO NOT USE HOSTNAMES, ONLY IP ADDRESSES IN THESE SETTINGS!
    -->
    <param name="rtp-ip" value="$${local_ip_v4}"/>
    <param name="sip-ip" value="$${local_ip_v4}"/>
    <param name="ext-rtp-ip" value="$${local_ip_v4}"/>
    <param name="ext-sip-ip" value="$${local_ip_v4}"/>
}}}

Then restart !BigBlueButton.

{{{
  sudo bbb-conf --clean
}}}

As of !BigBlueButton 0.80, the default setting for FreeSWITCH is to use 127.0.0.1 (see issue [http://code.google.com/p/bigbluebutton/issues/detail?id=1133 1133]).

=== How do I forward calls from my Asterisk server to FreeSWITCH in !BigBlueButton? ===

Let's assume the following:

{{{
asterisk server ip:          192.168.1.100
bigbluebutton/freeswitch ip: 192.168.1.200
}}}

* Changes to your Asterisk server *

Setup your gateway to !BigBlueButton/FreeSWITCH. in {{{/etc/asterisk/sip.conf}}} add
{{{
[fs-gw]
type=peer
username=fs-gw
insecure=very
contactpermit=192.168.1.200/255.255.255.255
qualify=no
nat=yes
host=192.168.1.200
canreinvite=no
disallow=all
allow=ulaw

}}}

Route the calls to the gateway. In {{{/etc/asterisk/extensions.conf}}} context where your calls are being handled, forward the calls to the gateway. Here, when someone dials 85001, the call is sent to the {{{fs-gw}}} defined above.
{{{
exten => 85001,1,Dial(SIP/fs-gw/${EXTEN})
exten => 85001,2,Hangup
}}}

* Changes to your !BigBlueButton/FreeSWITCH server *

In !BigBlueButton/FreeSWITCH, make the following changes:

Lock down so that only Asterisk can forward calls to FreeSWITCH. In {{{/opt/freeswitch/conf/autoload_configs/acl.conf.xml}}}, add the following ACL. We also need to allow !BigBlueButton to call into FreeSWITCH, that's why we add the IP of !BigBlueButton/FreeSWITCH into the ACL.

{{{
    <list name="asterisk-gw" default="deny">
       <node type="allow" cidr="192.168.1.200/32"/>
       <node type="allow" cidr="192.168.1.100/32"/>
       <node type="allow" cidr="127.0.0.1/32"/>
    </list>
}}}

Then we apply the ACL into the profile that receives the calls from external gateways. In {{{/opt/freeswitch/conf/sip_profiles/external.xml}}}, add the ACL under {{{<settings>}}}
{{{
  <settings>
    <!-- Apply ACL from asterisk-gw -->
    <param name="apply-inbound-acl" value="asterisk-gw"/>
}}}

To debug, try connecting to FS CLI and increase logging level. Once connected, make your call and see what the logs say.
{{{
  cd /opt/freeswitch/bin
  ./fs_cli

  Once connected:
  help -- shows the available commands
  console loglevel <level> -- change log level

  Ctrl-D to exit
}}}

=== How do I connect !BigBlueButton to external Freeswitch? ===

Edit {{{/usr/share/red5/webapps/bigbluebutton/WEB-INF/bigbluebutton.properties}}}

{{{
freeswitch.esl.host=127.0.0.1
freeswitch.esl.port=8021
freeswitch.esl.password=ClueCon
}}}

Change {{{freeswitch.esl.host}}} to point to your external FreeSWITCH ip address. Change {{{freeswitch.esl.password}}} to something else.

You can use [http://strongpasswordgenerator.com/] to generate passwords.


In your external FreeSWITCH server, edit {{{/opt/freeswitch/conf/autoload_configs/event_socket.conf.xml}}}.

{{{
<configuration name="event_socket.conf" description="Socket Client">
  <settings>
    <param name="nat-map" value="false"/>
    <param name="listen-ip" value="127.0.0.1"/>
    <param name="listen-port" value="8021"/>
    <param name="password" value="ClueCon"/>
    <!-- param name="apply-inbound-acl" value="localnet.auto"/ -->
  </settings>
</configuration>
}}}

Change the {{{listen-ip}}} to your external FreeSWITCH server IP and also change the {{{password}}} to be the same as {{{freeswitch.esl.password}}}.

Edit {{{/usr/share/red5/webapps/sip/WEB-INF/bigbluebutton-sip.properties}}}

{{{
bbb.sip.app.ip=127.0.0.1
bbb.sip.app.port=5070

sip.server.username=bbbuser
sip.server.password=secret

freeswitch.ip=127.0.0.1
freeswitch.port=5060
}}}

Change {{{bbb.sip.app.ip}}} to your !BigBlueButton server ip.

Change {{{sip.server.password}}} to something else.

Change {{{freeswitch.ip}}} to your external FreeSWITCH ip.

In your external FreeSWITCH server. 

Edit {{{/opt/freeswitch/conf/directory/default/bbbuser.xml}}}

{{{
  <user id="bbbuser">
    <params>
      <!-- omit password for authless registration -->
      <param name="password" value="secret"/>
      <!-- What this user is allowed to acces --> 
      <!--<param name="http-allowed-api" value="jsapi,voicemail,status"/> -->
    </params>
}}}

Change {{{password}}} to match the password you set in {{{sip.server.password}}}.


== How do I enable feature X in the !BigBlueButton client? ==
As of !BigBlueButton 0.71, you can configure some options in the client, such as enabling moderators to eject users from the virtual classroom.

Check out [ClientConfiguration client configuration] for details on how to enable or disable specific modules and features.  These options are on a server-wide basis (not virtual classroom or individual basis).

== Networking ==

=== How do I change the hostname of my !BigBlueButton server? ===

If you change the hostname (or IP address) of your !BigBlueButton server, you can easily change all the related !BigBlueButton configuration files using the [http://code.google.com/p/bigbluebutton/wiki/BBBConf bbb-conf tool ].


=== We recommend running !BigBlueButton on port 80 ===

We recommend running !BigBlueButton on port 80 -- specifically, having the nginx server in a !BigBlueButton server bind to port 80.  In other words, we recommend against running !BigBlueButton on port 8081, 8088 or another port.

Prior to 0.8, bbb-conf would let you configure !BigBlueButton to run on a different port, but this has lead to a number of problems that are not immediately obvious: 

  # !BigBlueButton client cannot use HTTP tunneling if the !BigBlueButton server is not listening on port 80 
  # Port conflicts with existing applications 
  # Resource contention with existing applications

To an experienced system administrator, the above problems are not insurmountable, but most people setting up !BigBlueButton are not experienced system administrators.  Therefore, changing the port results in clients being unable to connect, !BigBlueButton doesn't load, and/or performance is less than expected (because of resource contention).  

Sometimes these problems do not manifest themselves immediately.  In the past, we've had people posting to our forums describing how their !BigBlueButton server occasionally has problems or does not let users connect.  In some cases, after a lengthy exchange of e-mails back and forth, we would be granted temporary remote access to their server to try and figure out the error in !BigBlueButton, only to discover the server is running multiple web applications that are conflicting with !BigBlueButton's configuration, significantly reducing the resources available to !BigBlueButton or both.  In these cases, there was no error with !BigBlueButton, but in the configuration.

We understand that administrators want to run multiple applications on a single server.  This makes sense when your running multiple web-based applications.  If a web application returns a web page in 500 milliseconds instead of 250 milliseconds due to resource contention, the perceptual difference to the user is minimal.  At worst, the user will think your web application is a little slow, but it still works.

However, !BigBlueButton is a real-time application processing voice and video.  The human ear is very attuned to delays in audio.  If !BigBlueButton is returning audio packets later than normal or the audio becomes garbled because the CPU is unable to process the RTMP audio packets quickly enough due to resource contention, a delay in audio is much more perceptible to a user than a delay in loading a web page.   

For the above reasons, we recommend you setup !BigBlueButton on a dedicated server listening to port 80.  (See [FAQ#What_are_the_minimum_hardware_requirements_for_the_BigBlueButton what are the minimum hardware requirements for BigBluebutton].)

=== What ports must be open for external users to connect to !BigBluebutton? ===

These ports are 80 (HTTP), 9123 (Desktop Sharing), and 1935 (RTMP).  These ports are all TCP ports.

=== Does !BigBlueButton support tunneling? ===

Yes.  If a remote user is unable to connect to port 1935, which typically occurs when a remote user's corporate firewall blocks external access to all other ports except port 80, then their !BigBlueButton client will fail to connect to port 1935 and, after about ten seconds, will fall back to tunneling through port 80.


=== Can I provide external access to a !BigBlueButton server behind my firewall? ===

Yes.  A typical scenario is you have !BigBlueButton running on an internal computer behind a firewall.  You have defined an external hostname, such as `external.host.org`, that will resolve to the IP address of your firewall. You want external users to access !BigBlueButton using that hostname.

Note: The instructions below require that you use an external hostname (not IP address) for your firewall.  If you only have an IP address, you can setup a hostname using a free DNS service such as [http://dyn.com/dns/dyndns-free/ dny.com].

First, on your firewall, you need to forward three ports to the internal IP address of the !BigBlueButton server.  These ports are 80 (HTTP), 9123 (Desktop Sharing), and 1935 (RTMP).

Here is an example of forwarded ports on the D-Link DIR-665 router (the internal IP address of the !BigBlueButton server in this example  is 192.168.10.198):

[http://bigbluebutton.googlecode.com/svn/trunk/bbb-images/ports_example.jpg]

Next, when the firewall forwards incoming requests to the internal !BigBlueButton server at 192.168.10.198, the !BigBlueButton server must be listening for these requests.  The HTTP headers will identify them as for the server `external.host.org`, so you must tell !BigBlueButton to listen for incoming requests for that hostname (not the internal IP address).  Use the following command to change the !BigBlueButton configuration files to detect incoming requests to `external.host.org`.

{{{
sudo bbb-conf --setip external.host.org
}}}

Internally, !BigBlueButton must be able to call `external.host.org` to make API requests.  In this example, if the internal !BigBlueButton server is at 192.168.10.198, add the following line to /etc/hosts (you'll need to edit this file as root user).

{{{
192.168.10.198 external.host.org
}}}

To verify that the !BigBlueButton server can access `external.host.org`, enter the following command

{{{
wget -O - --quiet http://external.host.org/bigbluebutton/api 
}}}

This should resolve to:

{{{
<response><returncode>SUCCESS</returncode><version>0.7</version></response> 
}}}

Next, to verify that external users can access the !BigBlueButton server, try to telnet port 80.

{{{
telnet external.host.org 80
Connected to external.host.org.
Escape character is '^]'.
}}}

and port 1935 

{{{
telnet external.host.org 1935
Connected to external.host.org.
Escape character is '^]'.
}}}

and port 9123

{{{
telnet external.host.org 9123
Connected to external.host.org.
Escape character is '^]'.
}}}

If you can connect to the service running on all three ports (nginx, red5, and deskshare), then your external users should be able to connect to !BigBlueButton.

Once !BigBlueButton is setup for external access, internal access must also use the external hostname for connecting to the !BigBlueButton server.  This is because !BigBlueButton is now looking for incoming requests from `external.host.com` not an internal IP address.

=== Can I provide secure access to !BigBlueButton? ===
We've learned from other projects to be very careful on any statements regarding security.

As such, the !BigBlueButton developers make no representation of any security in !BigBlueButton.  We've not developed nor tested !BigBlueButton with HTTPS, SSL or secure RTMP.

All API requests are validated with a checksum generated by a shared secret (salt).  See [http://code.google.com/p/bigbluebutton/wiki/API#API_Security_Model API Security Model].

== Classrooms ==

=== I tried the application at/bigbluebutton and it does not work? ===

The grails applications at/bigbluebutton is old code and is now depreciated (it should no longer be accessible as of 0.71).  To control !BigBlueButton, we recommend using the [API API].  

We provide a number of [http://demo.bigbluebutton.org/demo/demo1.jsp API] demos with !BigBlueButton's install.  To modify one of these demos to create your own classrooms, see [#Can_I_run_multiple_virtual_classrooms_in_a_single_BigBlueButton How to create your own virtual classrooms].

Also, most people integrate !BigBlueButton with an existing system using one of the existing [http://www.bigbluebutton.org/open-source-integrations/ integration modules]. 


=== How do I modify the default landing page? ===

The default HTML landing page is located in

{{{
   /var/www/bigbluebutton-default/index.html
}}}

Change this page to create your own landing page.


=== Can I run multiple virtual classrooms in a single !BigBlueButton server? ===
Absolutely.  To see an example of this, check out the [http://demo.bigbluebutton.org/demo/demo3.jsp Join Courses] API example.  You can modify this demo page to setup your own branded landing page.

=== How do I setup new classrooms in !BigBlueButton? === 
If you are using Sakai, Moodle, Drupal, Joomla, Wordpress or other systems that already have a [http://bigbluebutton.org/support BigBlueButton integration], then installing the integration provides the easiest way to enable your users to access !BigBlueButton sessions.

If you have a bit of programming skills, you can create your own virtual classrooms by modifying this [http://demo.bigbluebutton.org/demo/demo3.jsp Demo Page] on a !BigBlueButton server.

You will find `demo3.jsp` in the directory `/var/lib/tomcat6/webapps/demo/demo3.jsp`.

You can edit the following section
{{{
meeting = new HashMap<String, String>();
allMeetings.put( "ENGL-2013: Research Methods in English", meeting );	// The title that will appear in the drop-down menu
	meeting.put("welcomeMsg", 	welcome);			// The welcome mesage
	meeting.put("moderatorPW", 	"prof123");			// The password for moderator
	meeting.put("viewerPW", 	"student123");			// The password for viewer
	meeting.put("voiceBridge", 	"82013");			// The extension number for the voice bridge (use if connected to phone system)
	meeting.put("logoutURL", 	"/demo/demo3.jsp");  // The logout URL (use if you want to return to your pages)

}}}

to define your own modules (such as changing the name to 'Community Room - 1').  When modifying `demo3.jsp`, you don't have to restart any processes: you can modify the source file, then reload the demo page and you'll see the updated content.

If you want users to open your demo page by default, you can modify

{{{
/var/www/bigbluebutton-default/index.html
}}}

to redirect the users to the demo page.  To do so, replace `index.html` with the following contents.

{{{
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Refresh" content="0;url=/demo/demo3.jsp" />
</head>
</html>
}}}


If you are looking for an integration module that does not exist, please post a request to 
[http://groups.google.com/group/bigbluebutton-dev/topics?gvc=2 bigbluebutton-dev].


=== How do I integrate !BigBlueButton with my own server? === 

!BigBlueButton provides an [http://code.google.com/p/bigbluebutton/wiki/API API] for integration with other web-based applications.  

The best approach is to see how others have integrated and adapt their code to your integration.  Don't you just love open source!


== Server Configuration ==

=== Where is the security salt located? ===

You'll find the security salt in the file 

{{{
   /var/lib/tomcat6/webapps/bigbluebutton/WEB-INF/classes/bigbluebutton.properties
}}}

Look for the line

{{{
   beans.dynamicConferenceService.securitySalt=<value_of_salt>
}}}

This is the security salt used for enabling 3rd party plug-ins and external applications to access your !BigBlueButton server through it's API.  

=== How do I change the security salt? ===

To change the security salt, do the following: 
  # Generate a new Universal Unique ID (UUID) from a UUID generator such as at [http://www.somacon.com/p113.php http://www.somacon.com/p113.php]. This will give a long string of random numbers that will be impossible to reverse engineer.  
  # Run the command `sudo bbb-conf --setsalt new_salt`. 

Note: If you are using a [http://bigbluebutton.org/support third-party plug-in] to connect to !BigBlueButton, be sure to use the plug-in's administrative interface to specify the new value for the salt; otherwise, if the salts do not match, the API calls from the third-party plug-in will fail.


=== How do I change the maximum allowed size for uploading a presentation? ===
The default maximum file upload size for !BigBlueButton is 30 MB. 

To change it, you need to modify two places: the !BigBlueButton client and the nginx configuration.  

To modify the client, you'll need to [https://code.google.com/p/bigbluebutton/wiki/DevelopingBBB setup a development environment] and recompile the client.  Once you have the development environment setup, modify the file 

{{{
/bigbluebutton-client/src/org/bigbluebutton/modules/present/ui/views/FileUploadWindow.mxml
}}}

and change the value for `maxFileSize:Number`, which is currently set to 30 MB.

{{{
var maxFileSize:Number = 30000000;

        if (fileSize > maxFileSize) {     
          // Hardcode for now to 30M limit. 
          // This should be configurable to match what's allowed in nginx. (ralam feb 23, 2010) 
          trace("File exceeds max limit:(" + fileSize + ">" + maxFileSize + ")");              
          enableControls();
          displayAlert(ResourceUtil.getInstance().getString('bbb.presentation.maxUploadFileExceededAlert'));
        } 
}}}



Next, change the corresponding limit (again 30 MB) in nginx.  Edit the following file

{{{
  /etc/nginx/sites-available/bigbluebutton 
}}}

and modify the value for client_max_body_size. 

{{{
       location /bigbluebutton { 
           proxy_pass         http://127.0.0.1:8080; 
           proxy_redirect     default; 
           proxy_set_header   X-Forwarded-For 
$proxy_add_x_forwarded_for; 

        # Allow 30M uploaded presentation document. 
           client_max_body_size       30m; 
}}}

Restart !BigBlueButton.  You should now have a different upload limit for uploading presentations from the !BigBlueButton client.

=== How do I change the video quality of the shared webcams? ===

The setting for picture quality of the webcams is in http://code.google.com/p/bigbluebutton/wiki/ClientConfiguration#Videoconf_Module config.xml] in the videoconf module.

In most cases, you can leave the default settings.  However, you can specify the Flash player use the maximum amount of bandwidth (camQualityBandwidth="0") to show a picture of ninety percent quality (camQualityPicture="90").

{{{
                        camQualityPicture="70"
}}}

To reduce the quality of the picture (and increase the frame rate), lower the value of camQualityPicture.  Corresponding, to increase the quality of the picture (and reduce the frame rate), increase the value of camQualityPicture.

However, as camQualityPicture is already ninety percent, you'll find that slight increases are not very noticeable in picture quality, but do decrease the frame rate.


  

You can change the video quality through the client's config.xml file, by default located in /var/www/bigbluebutton/client/conf. Scroll down to the entry named !VideoconfModule. The value of the videoQuality attribute can be anywhere from 0 to 100. 0 means priority is given to the bandwidth and if bandwidth is low, quality will suffer. Quality of 100 means no video compression will be done at all, and you will get maximum quality at the expense of bandwidth. If the bandwidth is low, the frame rate will suffer.

For more information see ClientConfiguration.

=== How do I change the /client/!BigBlueButton.html portion of the URL?===

Using nginx, you can rewrite the incoming URL for `/client/BigBlueButton.html` to appear as a different link, such as `/conference/`.  

 # Modify `/etc/bigbluebutton/nginx/client.nginx` and comment out the following section:

{{{
        # BigBlueButton.html is here so we can expire it every 1 minute to
        # prevent caching.
        #location /client/BigBlueButton.html {
        #        root    /var/www/bigbluebutton;
        #        index  index.html index.htm;
        #        expires 1m;
        #}
}}}

  # Create the file `/etc/bigbluebutton/nginx/rewrite.nginx` with the following contents:

{{{
location /client/BigBlueButton.html {
        rewrite ^ /conference permanent;
}

location /conference {
        alias  /var/www/bigbluebutton/client;
        index BigBlueButton.html;
        expires 1m;
}
}}}

  # Restart nginx with the following command:

{{{
   sudo /etc/init.d/nginx restart
}}}

Now login to the demo page and you'll see the URL now shows `/conference/` instead of `/client/BigBlueButton.html`.

=== Does !BigBlueButton offer secure collaboration? ===

There has been no effort to make the communication in !BigBlueButton secure.  For example, !BigBlueButton does not use https for the URLs, nor does it use RTMPS for the sending of data.

All API requests must have a checksum that is computed using a share secret, but otherwise there is *no* security offered in !BigBlueButton.


= Administration =

== How do I update !BigBlueButton to the newest version? ==
If you are running a !BigBlueButton VM 0.70 VM or had installed !BigBlueButton 0.70 using Ubuntu packages on Ubuntu 10.04, you can upgrade to the newest stable release with two commands:

{{{
  sudo apt-get update
  sudo apt-get dist-upgrade
}}}

If you would like to update instead to the latest version currently under development, you can do that too, but note that the development version of !BigBlueButton is often unstable, and nobody guarantees that it will work correctly. Here's how to do it:

Log into your VM, then edit `/etc/apt/sources.list.d/bigbluebutton.list` and change

{{{
#
# Repository for BigBlueButton
#
deb http://ubuntu.bigbluebutton.org/lucid/ bigbluebutton-lucid main
}}}

to
{{{
#
# Repository for BigBlueButton
#
deb http://ubuntu.bigbluebutton.org/lucid_dev/ bigbluebutton-lucid main
}}}

Do an `apt-get update/apt-get dist-upgrade` and you'll be running the latest builds.

== VM won't resolve packages when updating, or is not connected to the internet ==
If you're using VM player, please go to VM>Settings>Network Adapter and make sure it is set to Bridged, with the box underneath left unchecked. 
Also restart the networking on the VM by running the following command:
{{{
  sudo /etc/init.d/networking restart
}}}


== How do I delete old presentations on the server? ==

Documents uploaded to a presentation remain on the !BigBlueButton server until deleted by the administrator. 

To setup an automatic deletion of old presentations, create the file in

  /etc/cron.daily/bigbluebutton

with the contents

{{{
#!/bin/sh

test -x /var/bigbluebutton || exit 0

#
# Delete old presentation directories in /var/bigbluebutton
#
find /var/bigbluebutton -maxdepth 1 -type d -name "*-*" -mtime +11 -exec rm -r '{}' \;

#
# Delete saved webcam streams in red5
#
find /usr/share/red5/webapps/video/streams -name "*.flv" -mtime +1 -exec rm '{}' \;

#
# Delete saved desktop sharing streams in red5
#
find /var/bigbluebutton/deskshare -name "*.flv" -mtime +1 -exec rm '{}' \;

}}}

and set the script to be executable.  

{{{
sudo chmod +x /etc/cron.daily/bigbluebutton
}}}

Now, once a day, cron will execute this script and delete presentation directories in /var/bigbluebutton that are older than 11 days.  [Note: This script was incorporated in the build for !BigBlueButton 0.80, but is disabled by default.  To enable, edit /etc/cron.daily/bigbluebutton and comment out the `exit` command.]


= Using !BigBlueButton =
== Desktop Sharing ==
=== What is needed to run desktop sharing? ===
!BigBlueButton uses a Java applet to capture screen updates.   This means desktop sharing works for Mac, Unix, and PC platforms.  

Only the presenter needs to have Java installed to share their desktop.  You can test if your system has Java installed using the following [http://java.com/en/download/help/testvm.xml link].  To download Java onto your computer, visit the [http://www.java.com/en/download/index.jsp Java download page.]

If you can run the above test applet from your browser, you can run the desktop sharing in !BigBlueButton.  Please note that on Mac OS X with Java 7, you can run applets with FireFox but not Google Chrome, as Chrome is a 32-bit browser and Java 7 requires a 64-bit browser to run.  Hence, on Mac OS X, if you need to run desktop sharing, we recommend using FireFox.

There are no additional requirements (beyond having Flash installed) for viewers to run !BigBlueButton and view the presenter's desktop.  
  
=== How can I make desktop sharing faster? ===

First, a bit of background: to share your screen, !BigBlueButton runs a Java applet (Flash can't see your screen).  The Java applet takes a few screen shots each second, divides up each captured screen shot into a checkerboard, and figures out which checkerboard tile is different than the previous screen shot.  Those different tiles are then compressed and sent to the !BigBlueButton server for broadcast to viewers.

The compression algorithm is lossless, which means remote viewers see a pixel-for-pixel view of the presenter's destkop.  If the presenter's screen size is above 1280 x 1024, the applet will scale the screen shot to fit within 1280 x 1024 dimension before dividing it into a checkerboard.  This reduces the overall data sent to the server.

The benefit of the above approach is unlike most commercial web conferencing systems that download a binary file (i.e. DLL) on your windows machine (and then not provide any support for Mac or Unix), !BigBlueButton's desktop sharing runs on Mac, Unix, and PC computers.  However, the applet approach is going to be slower than a native code as the applet can only look at the screen as a bitmap -- it doesn't have any concept of what the operating system is actually drawing.  And the algorithm is simple: if a tile has changed, send it to the server.  

If the tile is mostly a solid color, it's compression works very well: the size of the compressed tile is small and is quickly sent to the server.  However, for example, if the tile portion is a 32-bit image, it will be larger and will take longer to send to the server.

The speed of the desktop sharing is largely determined by the upstream bandwidth of the presenter's computer.  Most internet connections provide non-symmetrical bandwidth, which means users have a narrow upstream bandwidth and a larger downstream bandwidth.  This narrow upstream bandwidth limits the rate at which the presenter's computer can send updated tiles to the !BigBlueButton server.  Running desktop sharing on a LAN is usually (much) faster than over the Internet as the corresponding upstream (and overall) bandwidth is greater.

There are four options to improving the speed of desktop sharing:

1) Reduce the amount of data sent to the server

To reduce the amount of data being sent to the server (and thus increase the refresh rates for desktop sharing), the presenter can do the following:
 
  # Share a smaller region of your desktop (this is a good approach if you want to share only a specific window)
  # Reduce the screen size to 1024x768 or 800x600 (this is in essence similar to sharing a region)
  # Replace any 32-bit desktop background image with a solid color (this greatly increases the refresh rates when the presenter's desktop becomes visible)
  # Lower your screen depth from 32-bit to 16-bit

2) Increase upstream bandwidth available to desktop sharing

To increase upstream bandwidth, the presenter can turn off any applications that are using bandwidth, such as file transfer or P2P applications.  Turn off sharing of webcam as well.

3) Improve the algorithm for desktop sharing

There are a number of open issues for improving the desktop sharing: [http://code.google.com/p/bigbluebutton/issues/detail?id=512 512], [http://code.google.com/p/bigbluebutton/issues/detail?id=854 854], [http://code.google.com/p/bigbluebutton/issues/detail?id=902 902], and [http://code.google.com/p/bigbluebutton/issues/detail?id=1141 1141].  

4) Improve the architecture for desktop sharing

Another approach is to explore creating platform specific code that would be downloaded by the Java applet and run natively (this is how commercial web conferencing systems achieve their speed).  

There are lots of opportunities to explore on how to increase the speed of desktop sharing in !BigBlueButton.  To understand how the !BigBlueButton project allocates resources for each release, see [http://code.google.com/p/bigbluebutton/wiki/FAQ#When_will_feature_X_be_implemented When will feature X be implemented?].



=== Can I share a specific window when sharing my desktop ===

Yes.  As of !BigBlueButton 0.71, you can share a region of your desktop.  Just select the region of your window and, to your viewers, they will just see that window.


== Presentations ==
=== How can I modify the default presentation? ===
The default presentation is stored in

{{{
  /var/www/bigbluebutton-default/default.pdf
}}}

The location for the default presentation (default.pdf) is stored in [ConfigurationFiles#/var/lib/tomcat/webapps/bigbluebutton/WEB-INF/classes/bigbluebut bigbluebutton.properties], which is located in

{{{
   /var/lib/tomcat6/webapps/bigbluebutton/WEB-INF/classes/bigbluebutton.properties
}}}

bigbluebutton.properties.  The specification is 

{{{
# Default Uploaded presentation file
beans.presentationService.defaultUploadedPresentation=${bigbluebutton.web.serverURL}/default.pdf
}}}

You can change `beans.presentationService.defaultUploadedPresentation` to point to any valid URL.

If you want to specify the default presentation for a given meeting, you can also pass a URL to the presentation as part of the [API#Preupload_Slides create] meeting API call.

=== Can I upload Microsoft Office 2007 documents to !BigBlueButton? ===

!BigBlueButton uses !OpenOffice 3.2 for converting Microsoft Office documents into PDF for display in !BigBlueButton.  Office 2003 documents convert well; however, Office 2007 and Office 2010 documents (such as .pptx) are problematic with !OpenOffice 3.2.  In particular, the font alignment is not precise. 

If you are using Office 2007, we recommend using Microsoft's free download to enable Office 2007 to save any document to PDF: [http://www.microsoft.com/downloads/details.aspx?FamilyID=4d951911-3e7e-4ae6-b059-a2e79ed87041&displaylang=en download link].

You'll always get the best results with PDF.

=== Will my animations in PowerPoint convert when uploading to !BigBlueButton? ===

Since !BigBlueButton must convert your PowerPoint document to PDF (using OpenOffice), none of the animations (visual or audio) will be converted.  

You'll get a static image corresponding to the final state of each slide.


=== I uploaded a document but some fonts are missing after conversion ===

If you upload a PDF document, all your fonts will come through with the document.  In other words, for best results, if possible always create a PDF and upload it for conversion.

If you upload a Word or Power Point document that has special fonts, such as Chinese language, the document must first be converted by !OpenOffice into PDF.  Unless you've configured the !OpenOffice server running within !BigBlueButton to have the necessary fonts, then you will see empty spaces (or boxes) for the missing fonts.

To add the Japanese fonts, enter the following commands on the !BigBlueButton server.

{{{
   sudo apt-get install language-support-fonts-ja
   sudo apt-get install language-support-ja
   sudo apt-get install openoffice.org-l10n-ja
   sudo apt-get install ttf-ipafont
}}}

=== I can't upload a presentation from Linux ===
We've noticed that on some UNIX systems, such as Linux (openSUSE 11.2 x64), when you click the 'upload presentation' button (lower left-hand of Presentation window), Flash will not let you upload a presentation.

If you encounter this problem, try the following:

  # Click 'upload presentation'
  # Close the File Open dialog box
  # Click the (+) button next to the file name for the presentation (the File Open dialog box reappears)
  # Select a file to upload in the File Open dialog box
  # Click 'Open'
  # Click 'Upload'
  
These steps trigger the opening of the File Open dialog box by a user action, which seems to work better than the automatic display of the File Open dialog box when there is currently no presentation loaded.
  
=== Can I increase the 100 page limit for uploads? ===

!BigBlueButton, by default, restricts uploads to 100 pages.  To increase this value, open `/var/lib/tomcat6/webapps/bigbluebutton/WEB-INF/classes/bigbluebutton.properties` and change the `maxNumPages` value:

{{{
#----------------------------------------------------
# Maximum number of pages allowed for an uploaded presentation (default 100).
maxNumPages=100
}}}

After you save the changes to `bigbluebutton.properties`, restart the !BigBlueButton server with

{{{
sudo bbb-conf --restart
}}}
 
== Video ==

=== I'm on Ubuntu and I can't share my webcam ===
See Ubuntu's documentation for [https://help.ubuntu.com/community/Webcam/Troubleshooting Webcam Troubleshooting].

 
=== How do I restrict the webcam to only the presenters? ===

You can restrict sharing of webcam to only the current presenter. To do so, open [http://code.google.com/p/bigbluebutton/wiki/ClientConfiguration#Videoconf_Module config.xml] in the parameters for videomodule, change the following:

{{{
presenterShareOnly="false"
}}}

to

{{{
presenterShareOnly="true"
}}}




== Voice Conference ==

=== Why can't others hear me in the voice conference? ===

If others in the voice conference don't hear you when you speak, it's likely that Flash has picked the wrong microphone on your computer.  You can change this with the following steps:

  # Right-click within the !BigBlueButton client
  # Choose "Settings..." from the flash pop-up menu
  # Click the microphone icon
  # Try choosing a different microphone from the drop-down list

You see a volume indicator next to the drop down for choosing a microphone.  Try selecting a different microphone.  When you select the active microphone, you'll immediately see activity in the volume indicator when you speak.

Close this Flash settings dialog and others in the voice conference should now hear you.


=== Why do others only hear part of my audio? ===

FreeSWITCH has automatic audio clipping, which means it will not transmit a speaker's audio if the volume is too low.   If the speaker's audio is low, FreeSWITCH might take a moment to recognize that someone is speaking before transmitting, causing others to hear your audio only after you have started speaking a few words.


Try placing the microphone closer to your mouth.  Also, try increasing the sensitivity of your microphone (see [FAQ#How_can't_others_hear_me_in_the_voice_conference? why can't others hear me when I join the voice conference]).

You can also change the settings on FreeSWITCH to lower default threshold for audio.   To lower the threshold, switch to the root account, then edit

{{{
 /opt/freeswitch/conf/autoload_configs/conference.conf.xml

}}}

and set energy-level to a lower value (.e.g 50)

{{{
   <profile name="wideband">
     <param name="energy-level" value="50"/>
}}}

Save the file, then do `sudo bbb-conf --restart` to restart !BigBlueButton.

=== Why do I hear music when I join the voice conference? ===

When you are the only person in the voice conference, you'll hear 'music on hold'.  This indicates that you've successfully joined (as opposed to hearing nothing).  Once a second listener joins, the music stops and you can talk with the other person.


=== Why is there an echo in the voice conference? ===

In !BigBlueButton 0.80, we use the built-in acoustic echo cancellation, so in most cases, you should not hear any echo from remote users.

In any event, we always recommend that you have your remote users use a headset with microphone.  This will ensure the best audio in a session.

If a remote user is using a laptop with a built-in microphone, you should not hear an echo.  However, if two remote users are using laptops with built-in microphones and neither is using a headset and both are sitting close to each other (close enough for the microphone in one laptop to pickup the audio from the speakers in the other laptop), then you will hear an echo.  The reason is the built-in echo cancellation only works with the audio coming from the host laptop -- the audio coming from the second laptop will be picked up as an external audio source.

If a student is causing echo, the best way to solve this problem, if you are logged in as a moderator, is to mute the user by clicking the microphone icon to the left of their name. 

Overall, the best solution is ask all users to use a headset -- this will ensure no background noise or echo.

=== Why is there a delay in the audio when I use VoIP? ===

You will experience a delay, depending on the network latency from the speaker to the !BigBlueButton server, when using the built-in VoIP in !BigBlueButton 0.80 (clicking the headset icon).

Here's a breakdown of the path for the audio packets, from your !BigBlueButton client, when using VoIP.  When you speak, your audio is transmitted by the !BigBlueButton client to red5 using speex codec.  It is then transmitted by red5 to FreeSWITCH (via red5phone), then FreeSWITCH mixes in the audio, then the resulting audio stream is sent back to red5phone (via SIP), and transmitted back to the client.

While this all happens quite quickly, we are investigating a number of ways to reduce the transcoding.


=== How to setup an external phone number for the FreeSWITCH server ===

FreeSWITCH is a soft switch and can accept incoming phone numbers.  In the industry, these incoming phone numbers are called direct inward dialing (DID) numbers.  You can obtain a DID from a SIP trunk provider, which is a third-party company that essentially maps a DID (a phone number) to an IP address on the internet.  When users dial that phone number, the SIP trunk provider converts the voice call to a digital format (such as µlaw), and authenticates and forwards the call using SIP to an IP address on your !BigBlueButton server.  SIP stands for "session initiation protocol" and it's a protocol (like HTTP) for initiating a transfer of data, in this case setting up a two-way audio stream.

Setting up DIDs involves configuration of FreeSWITCH. If you've never done this before, be prepared to read some documentation. It's not going to be a one or two hour job.  See [http://wiki.freeswitch.org/wiki/SIP_Provider_Examples FreeSWITCH documentation]. If you want help in setting up DIDs, contact one of the [http://bigbluebutton.org/support companies offering BigBlueButton support] or a [http://www.digium.com/en/products/carrier-interop.php SIP Trunk provider].

Setting up DIDs will give users with poor internet connection the option of dialing into the voice conference using a phone.  The trade off is that it will cost money to provide SIP trunking to your FreeSWITCH server.

If your hosting your !BigBlueButton server in an university, college, or within a commercial company, there may already be a VoIP network setup from which you may be able to obtain a DID. 

=== Why is the audio not synced with the video? ===

Currently, the audio and video in !BigBlueButton go through two separate and different systems: the audio goes through FreeSWITCH, while the video goes through red5.  

For the video, red5 does not do much with the video packets -- it just re-broadcasts them to all the clients currently subscribed to the video stream.  It's basically a straight pass through of the packets.

For audio, the voice packets have a longer route to take (see answer to question above).


=== How do I remove sound when a user join or leave the conference? ===
For FreeSWITCH, comment out {{{the following in /opt/freeswitch/conf/autoload_configs/conference.conf.xml}}}
{{{
      <!--param name="enter-sound" value="tone_stream://%(200,0,500,600,700)"/-->
      <!--param name="exit-sound" value="tone_stream://%(500,0,300,200,100,50,25)"/-->
}}}

=== I'd like to connect my !BigBlueButton server to PSTN. Where can I det DIDs?===
You can try to find them here http://www.voip-info.org/wiki/view/DID+Service+Providers

=== Why did my voice conference number work in 0.7 but not in 0.71? ===
In !BigBlueButton 0.7, Asterisk was configured to use any 5-digit conference number. However, for !BigBlueButton 0.71, FreeSWITCH is configured to use any 5-digit number that begins with 7 (i.e. 7XXXX). 

To configure FreeSWITCH to accept any 5-digit conference number, in /opt/freeswitch/conf/dialplan/public.xml change

{{{
    <extension name="bbb_conferences">
      <condition field="destination_number" expression="^(7\d{4})$">
          <action application="answer"/>
          <action application="conference" data="$1@wideband"/>
          <!-- <action application="conference" data="$1@wideband"/> -->
      </condition>
    </extension>

}}}

to

{{{
    <extension name="bbb_conferences">
      <condition field="destination_number" expression="^(\d{5})$">
          <action application="answer"/>
          <action application="conference" data="$1@wideband"/>
          <!-- <action application="conference" data="$1@wideband"/> -->
      </condition>
    </extension>
}}}

and then restart FreeSWITCH.  

{{{

sudo /etc/init.d/freeswitch restart

}}}

In !BigBlueButton 0.80 and later you can specify any five digit number.

== Chat ==

=== How can I copy all chat messages to the clipboard? ===

Right-click within the chat area and choose the option "Copy All Text".

=== When I make !BigBlueButton full screen I can't enter any text into chat ===

By design, Adobe disables keyboard input of Flash applications when they go full-screen.  

This prevents the scenario where a malicious Flash application tries to 
masquerade as your desktop showing a web browser, for example, with a login 
screen to your bank account.  

As of !BigBlueButton 0.71, we've removed the full screen button and instead recommend users make their browser full screen. This has the same effect, but allows you to use your keyboard.

=== How come when I use a | (pipe character) in the chat any text after it disappears? ===

This has to do with how some data is used internally.  The data after the | is stripped away and therefore will not show.



== Record and Playback ==

These answers are related to the !BigBlueButton 0.8-beta.

=== Where is the record button? ===
In !BigBlueButton 0.8, the external application that uses the !BigBlueButton API can now pass an additional parameter `record=true` when creating a session.   This additional parameter instructs the !BigBlueButton server to record the session and make a recording available through subsequent [http://code.google.com/p/bigbluebutton/wiki/API#Get_Recordings getRecordings] calls.

There is no user interface for the presenter to turn on/turn off a recording.  

When instructed through the API call, the !BigBlueButton server will record all of the meeting, from the time the first person joins to when the last person leaves.  A meeting may also end when it reaches it's duration or the [http://code.google.com/p/bigbluebutton/wiki/API#End_Meeting end] is called on the meeting.

=== What parts of the session does !BigBlueButton record? ===

!BigBlueButton now record events (join, leave, who's talking, chat) and media (audio, webcam, presentations, and desktop sharing) for later playback. After the session ends, the !BigBlueButton server will run one (or more) ingest and processing scripts to convert the recorded events and media into playback formats (see Record and Playback Specification). 

The build-in ingest and processing script _slides_ will process the recorded events and media to create an HTML5 page that will playback slides, audio, and chat.

When integrated with Matterhorn, !BigBlueButton can process the desktop and webcam for automatic submission to a Matterhorn server (see Matterhorn integration).  Playback of recorded content occurs within the Matterhorn interface.

Currently, !BigBlueButton does not record or playback mouse movements or whiteboard events.  The intent is to add these elements to playback in a future iteration of !BigBlueButton.

=== What browsers support playback ===
In !BigBlueButton 0.80, the audio from a recorded session is encoded into [http://en.wikipedia.org/wiki/Vorbis Vorbis], an open source audio format that is not patent encumbered.  Playback of Vorbis audio is supported in FireFox and Chrome, but not IE and Safari.

With the upcoming !BigBlueButton 0.81, !BigBlueButton will playback the webcams from a session using the WebM container, which, thanks to Google, provides a high-quality open source video codec VP8.  Playback of video in VP8 is supported by FireFox and Chrome, but not IE and Safari.   See [http://en.wikipedia.org/wiki/HTML5_video HTML5 video] wikipedia article.

Using the  [http://www.google.com/chromeframe?quickenable=true Google Chrome Frame] within IE, you can also support the above codecs.

Safari does not support the open source codecs.  Playback on Safari or iOS devices requires creation of h.264 videos and the AAC codec, both of which are patent encumbered and require licensing.  For h.264 licensing see [http://www.mpegla.com/main/default.aspx MPEG-LA] and for AAC licensing see [http://www.vialicensing.com/ VA Licensing].  It you need playback on Safari, some of the companies that provide [http://www.bigbluebutton.org/commercial-support/ commercial support] for !BigBlueButton can provide you a license and support for such playback.
 

=== Can I see the total time of the session ===
The information displayed during playback is browser specific.  

In Chrome, the audio playback component shows only the current time index for the playback.  To see the overall length of the session, you can scrub to the end of the audio after the audio file has loaded.

In FireFox, the audio playback component shows the both the current time index and total time of the audio file.


=== How do I modify the default playback format? ===

The ingest and processing scripts, written in Ruby, process the recorded events and media to create a playback option.  The default scripts, called `slides.rb` (there is a script for processing and publishing), are located in 

{{{
/usr/local/bigbluebutton/core/scripts/process/slides.rb
/usr/local/bigbluebutton/core/scripts/publish/slides.rb
}}}

!BigBlueButton uses popcorn.js, an HTML5 media framework, for playback.  

By modifying slides.rb, you could, for example, exclude chat from the layout, add themes or colors, or change the layout of the HTML5 web page, add a download link to the content, etc.


=== How do I download a recorded session? ===

Curently, `slides.rb` does not create a download package.

When looking to download a recorded sessions, most expect a single link to download the video file.

In contrast, `slides.rb` does not create video file for playback.  Video files for a three hour lecture can get very large.  Instead, `slides.rb` creates an HTML5 page that referenes PNG images and audio, and time indexes the PNG images against the audio to match their display in the session.  The result is the source playback files are very small and can be hosted on any web server.  The drawback is there will be a pause for the browser to downloading all this content, but, once downloaded, there is no more load on the web server.

The script `slides.rb` could create a download package -- which would be .zip file of PNG images, audio file, HTML, XML, and javascript libraries for later playback.



















= Developing for !BigBlueButton =

== Setup ==

=== Setting up the Dev environment ===
See [DevelopingBBB Developing !BigBlueButton] for full instructions.

=== Where can I download the latest build? ===
You can checkout the latest code from Git.  However, if you want to install the latest build from packages, see [The_Client using git to checkout from master].

=== I want to develop from Windows! ===

Even though the !BigBlueButton VM makes your life much easier, some people prefer to develop in their Windows environment instead. Once you have the development environment setup, you can mount the VM drive to Windows. When you launch Eclipse of Flex Builder simply create your workspace on the VM drive. This way you'll be developing in Windows with the source on the VM. Once you're ready to deploy, switch to the VM console and deploy using ant. We've found this is the easiest way to develop for !BigBlueButton.

=== How to compile and deploy the components of !BigBlueButton? ===
For most components of BBB, the source on the !BigBlueButton VM includes ant scripts which you can use to compile and deploy that particular component. See DevelopingBBB.

=== What if I want to develop for the Client only? ===
If you are just working on the client side, you need to edit the file config.xml (located in the src/conf folder) to point to a running instance of !BigBlueButton. Change all the IP addresses in the file to the IP of your BBB server or BBB VM. In the entry for the Viewers Module, change the attribute host to host="conf/join-mock.xml". This will enable you to launch and test the client directly from the Flex environment, bypassing the Web component of !BigBlueButton.

You need to create the following 2 directories on your bbb server if they're not already there: /var/bigbluebutton/conference-mock-default/room-mock-default and change the owner to tomcat6:tomcat6 (chown -R tomcat6.tomcat6 /var/bigbluebutton/conference-mock-default) 

=== My client fails at startup with RSL error; Error 2035:URL Not Found ===
This is related to localization. Before you launch your client, you need to first separately run the ant localization task. This task is included in your client directory in the build.xml file. It needs to run separately because otherwise java will run out of memory if all tasks are ran together. You can run the localization task from the command line or from Flex if you've set up ant to work with Flex Builder. You can find instructions on how to get Ant working with Flex [http://livedocs.adobe.com/flex/3/html/help.html?content=anttasks_1.html here]




= Troubleshooting =

== General ==

=== Some users are experiencing audio problems ===
!BigBlueButton uses 16 KHz wideband speeks audio codec, which is a high-quality audio codec that compresses very well.   If your run a !BigBlueButton server within a LAN environment, you can get a sense of the audio quality.  It should sound much richer than plain ordinary telephone system (wich is 8 Khz audio).

To setup !BigBlueButton for external users, such as on-line classess, we [#What_are_the_minimum_hardware_requirements_for_the_BigBlueButton recommend] running !BigBlueButton on a dedicated (non-virtual) server with 100Mbits/sec bandwidth to/from the server.  Furthermore, we [#What_are_the_minimum_bandwidth_requirements_for_a_user? recommend] remote users have a minimum upstream bandwidth of 0.5 Mbits/sec and downstream bandwidth of 1.0 Mbits/sec. 

When remote users experience audio problems, check the following areas:


1. Check CPU available on your !BigBlueButton server  

Login to your !BigBlueButton server during a session and watch it's CPU using the command `top`.  When running `top`, press '1' to see a list of all CPUs and their load.  You should see Cpu0, Cpu1, etc.  If you are running a quad-core CPU with hyper-threading (recommended), you'll see eight virtual CPUs.

The overall CPU usage should stay below 70%.  If the overall CPU consistently stays above 70%, you'll likely get audio troubles as the !BigBlueButton server will not have enough available CPU to keep up with the audio packets.

If your !BigBlueButton server is virtualized, there is no guarantee on how much CPU time your server gets.  If your sharing the CPU of your !BigBlueButton server with other virtualized servers on the host, it will will take longer for !BigBlueButton to process audio packets.  This setup may also affect audio quality.


2.  Check bandwidth provided !BigBlueButton server's ISP

To test your server's bandiwdth you'll need a second server on the internet that has at least as good bandwidth as your server.  Make sure the second server is external and uses the ISP internet connection.  When there is no significant network activity on your !BigBlueButton server (such no active !BigBlueButton sessions), try transferring a large file to/from your !BigBlueButton server to the second external server using `scp`.  This will give you a rough estimate of the maximum transfer rates.  Check with your ISP if these transfer rates are low.

Next, try monitoring your server's traffic during a class begins. There are many Unix commands to monitor traffic, one of which is `bmon`.  

{{{
   sudo apt-get install bmon
}}}

`bmon` will show you the amount of incoming data (RX rate) and transmitted (TX data) in kilobytes or megabytes, so you'll need to multiply by 8 to get bits/sec.

As !BigBlueButton users join the audio on your server, you should see *both TX and RX numbers increase*.  If they don't see these numbers increase when new users join or, for example, when a presenter uploads new slides, or when someone shares a webcam, etc. then you have hit the bandwidth cap on your server.  At this point, the audio for all users will start to degrade as there is insufficient bandwidth for new users or any common operations (such as uploading slides).

For getting a better estimate of the amount of bandwidth required for your users, see [#What_are_the_bandwidth_requirements_for_running_a_BigBlueButton this FAQ entry].


3.  Check Network connection for clients 

You may have a dedicated server with sufficient bandwidth, but if a remote users' internet connection is poort, their audio quality will not be good.

We [#What_are_the_minimum_bandwidth_requirements_for_a_user? recommend] that users have .5 Mbits/sec upload speed and 1.0 Mbits/sec download speed.  Of course, these are not hard numbers, and !BigBlueButton will certainly work with less bandwidth, but if your clients have bandwidth in this range, they should experience good audio

To test a user's actual internet bandwidth, have them visit http://speedtest.net/.  The results at http://speedtest.net/ will give a fairly accurate test of the user's upload and download speeds.  If these numbers are much less than .5 Mbits/sec upload speed and 1.0 Mbits/sec download, their audio will be poor.  One quick check is to ask the users to turn of any file transfer they have in the background (such as bittorrent clients) and run the test again. 

If you can have the use the ping command (windows or Unix prompt) to ping the !BigBlueButton server, you want to see a ping response of less than 100ms. 

Also, if the user's client takes over a minute to load, they are likely tunnelling through port 80, which will further degrade the audio.


In general, if all users are encountering audio problems, the issue might be with the !BigBlueButton CPU being overloaded or the bandwidth to the !BigBlueButton server is saturated.

If a specific user is having poor audio quality (i.e. only their audio is choppy but everyone else sounds good), have the individual do a speed test.  Furthermore, if possible, if you are in the session with them and can verify their audio is poor, have them cross-check using demo.bigbluebutton.org (which is on a dedicated, high-bandwidth connection).  Specifically, have that user into one of the [http://demo.bigbluebutton.org/demo/demo2.jsp sample rooms], join them in the room, and check their audio again.  If the audio sounds better, then it might be the user's internet connection to/from your !BigBlueButton server is dropping more packets than to/from the !BigBlueButton demo server.

Flash restricts applications to using TCP/IP for audio, if the user's network connection to the !BigBlueButton server is experiening packet loss (dropped packets), their computer will resend dropped packets, which will incur audio problems if this occurs frequently.

If there is a lot of packets getting cued for resend, you can try having the user drop from audio and then rejoin (click the headset icon twice).  If you are a moderator, you can click the 'x' next to their name in the listener's window.  This will eject them from the audio session and have their !BigBlueButton client automatically rejoin.


If most users are experiencing good auidio, but a few are not, since !BigBlueButton uses FreeSWITCH for audio, you could also [#How_to_setup_a_external_phone_number_for_the_!FreeSWITCH_server setup dial-in numbers using a SIP Trunk provider] to provide the few users with audio problems the ability to dial into the voice conference.


=== Client hangs loading at 100% ===
The !BigBlueButton client needs to connect to Adobe for downloading libraries.  Clients will hang if they connect to a !BigBlueButton server without internet connectivity.

This usually occurs if install !BigBlueButton on a server (or download the VM), then place the server on a local network with no connectively to the Internet.

If the !BigBlueButton client is able to connect to download the additional libraries, you can subsequently disable Internet connection and use !BigBlueButton on a closed network.

=== Users do not appear in the listeners window ===
For a user to appear in the listener's window, the 3rd party application using the !BigBlueButton API to create a room must pass a `voiceBridge` parameter with the `create` call.  See [API#Create_Meeting create meeting] call.  This is done using the [08InstallationUbuntu#4._Install_API_Demos built-in API demos].

Next, !BigBlueButton must successfully connected to FreeSWITCH's SIP port and FreeSWITCH's Event Socket Layer.  To resolve connection problems, see question below.

=== voice Application failed to register with sip server ===
When doing `sudo bbb-conf --check` you may see the error

{{{
voice Application failed to register with sip server
}}}  

This error occurs when bbb-apps-sip isn't able to make a SIP call to  FreeSWITCH.  You'll see this in !BigBlueButton when users click the headset icon and don't join the voice conference.

Here are the possible causes for this error with steps to resolve.

  * You have just installed !BigBlueButton, but not restarted it.  The packages do not start up the !BigBlueButton components in the right order.  To restart !BigBlueButton, do the following 

{{{
    sudo bbb-conf --restart
    sudo bbb-conf --check
}}}

  * The init.d script for red5 must execute before the init.d script for FreeSWITCH (or more specifically bbb-freeswitch-config).  FreeSWITCH nees to be running before red5 can successfully start.  A fix has been applied for this in !BigBlueButton 0.8-beta-2.  To apply this fix to 0.71a, see [http://code.google.com/p/bigbluebutton/issues/detail?id=916 issue 916].

  * The IP address on the !BigBlueButton server has changed (or you have multiple IP addresses on the server) causing FreeSWITCH to bind (listen) to a an IP address, but !BigBlueButton trying to connect on an old (or incorrect) IP address.  A fix has been applied for this in !BigBlueButton 0.8-beta-4 (see [FAQ#How_do_I_configure_FreeSWITCH_to_use_127.0.0.1? how do I configure FreeSWITCH to use 127.0.0.1]).

If you don't want FreeSWITCH to bind to 127.0.0.1, you need to figure out which IP address it is using.  First, determine the IP address FreeSWITCH on which is monitoring for incoming SIP calls with the following command:

{{{
netstat -ant | grep 5060
}}} 

You should see an output such as

{{{
tcp        0      0 234.147.116.3:5060    0.0.0.0:*               LISTEN
}}}

In this example, FreeSWITCH is listening on IP address 234.147.116.3.  The IP address on your server will be different.

Next, edit `/usr/share/red5/webapps/sip/WEB-INF/bigbluebutton-sip.properties` and set the value for `sip.server.host` to the IP address returned from the above command.   Save the changes (you'll need to edit the file as root to save changes).

Restart !BigBlueButton using the commands and run the built-in diagnostics checks.  

{{{
sudo bbb-conf --clean
sudo bbb-conf --check
}}}

If the above does not resolve your problem, post to the output of the commands `sudo bbb-conf --check` and `ifconfig` to [http://groups.google.com/group/bigbluebutton-setup/topics?gvc=2 bigbluebutton-setup] and we'll help you there.

 
=== I've started a new !BigBlueButton VM but I don't know the password to login via SSH ===
When the VM first asks you to change the password, you will need to enter the password 'default' twice before it lets you change to a new password. Many people miss this. Try logging in with 'firstuser' - 'default' again.

=== I can join the voice conference but nothing appears on the Listener's window? ===
 * Make sure {{{/usr/share/red5/webapps/bigbluebutton/WEB-INF/bigbluebutton.properties}}} values matches those with {{{/etc/asterisk/manager.d/bigbluebutton.conf}}}
 * Make sure {{{enabled = yes}}} in {{{/etc/asterisk/manager.conf}}}
 * See if changing {{{bindaddr = 0.0.0.0}}} to {{{bindaddr = 127.0.0.1}}} works.
{{{
firstuser@bbb-vm-20091109:$ more /etc/asterisk/manager.conf
;
; Asterisk Call Management support
;

; By default asterisk will listen on localhost only.
[general]
enabled = yes
port = 5038
bindaddr = 127.0.0.1
;bindaddr = 0.0.0.0

; No access is allowed by default.
; To set a password, create a file in /etc/asterisk/manager.d
; use creative permission games to allow other serivces to create their own
; files
#include "manager.d/*.conf"

}}}

Try 

{{{
   sudo bbb-conf --check
}}}

which will analyze your current setup and print out any warnings/problems it finds.  Also see Why_did_my_voice_conference_number_worked_in_0.7_but_not_in_0.71.


=== Why can't I resize my portrait document? ===

!BigBlueButton is designed so the viewers of the presentation window are always in sync with the presenter's view.  It's not possible for the presenter to point at something and a viewer to say "I don't see what you are pointing at".

To keep the presentation windows in sync, when you upload a presentation (landscape or portrait), the size of the presentation window becomes a ratio of the presentation.  You and viewer may have different sized windows, due to the sizes of your respective monitors, but you both always see the same content.  As of !BigBlueButton 0.71, this mode is equivalent to always running in "fit to page" mode.  A presenter can zoom in and out, and when you zoom out completely !BigBlueButton shows the entire page.

For landscape documents, the "fit to page" approach works well.  Monitors are landscape, so presenting a landscape document makes good use of the screen space.  

However, for portrait documents, the "fit to page" approach means that text is usually too small to read.  The presenter can zoom in to a portion of the document, but !BigBlueButton does not change the width of the presentation window itself -- it's keeping that ratio to ensure both presenter and viewer are in sync.

We plan to add a "fit to width" option in !BigBlueButton in a future iteration, one that both keeps the viewers and presenters in sync, but allows the presenter to better show portrait documents.  


=== When I click on the headset icon, nothing happens? ===

First, as with most errors, run

{{{
   sudo bbb-conf --check
}}}

To see if it can determine configuration errors.

If you are running !BigBlueButton on EC2, then note that EC2 uses both a public and private IP address.   For example, on an EC2 instance if you type `ifconfig` you'll see that eth0 is bound to an internal private IP address.

Here's a sample output: 
{{{
eth0      Link encap:Ethernet  HWaddr 12:31:33:22:25:c2
          inet addr:10.242.78.44  Bcast:10.242.7.255  Mask:255.255.254.0
          inet6 addr: fe80::1034:33ff:fd02:23c2/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:4004469 errors:0 dropped:0 overruns:0 frame:0
          TX packets:5024657 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:642594447 (642.5 MB)  TX bytes:2670592958 (2.6 GB)
}}}

!BigBlueButton needs to use the private (not public) IP address of the EC2 instance to connect to FreeSWITCH.  To do this, 

  # Edit /usr/share/red5/webapps/sip/WEB-INF/bigbluebutton-sip.properties
  # Change the property for sip.server.host for the internal IP address of the EC2 instance
  # Type `sudo bbb-conf --clean` to do a clean restart of !BigBlueButton.

After you do this, typing `sudo bbb-conf --clean` will report an 'IP does not match' warning, but you can ignore it.  In most cases, this would be an error, but on EC2 !BigBlueButton must use the private IP for connecting to FreeSWITCH, but the rest of !BigBlueButton must use the public IP (or hostname) for the configuration to work.

If you are a developer making changes to !BigBlueButton, you can also check
 * look at the [http://code.google.com/p/bigbluebutton/wiki/ConfigurationFiles#/usr/share/red5/log/sip.log sip.log] and look for errors.
 * Open up asterisk console {{{sudo asterisk -vvvvvvr}}} and then try clicking on the headset icon on the client again. Look at the logs on the asterisk console for clues.
 * Make sure [http://code.google.com/p/bigbluebutton/source/browse/trunk/bbb-voice/src/main/webapp/WEB-INF/bigbluebutton-sip.properties /usr/share/red5/webapps/sip/WEB-INF/bigbluebutton-sip.properties] (startRtpPort and stopRtpPort) has entries in [http://code.google.com/p/bigbluebutton/source/browse/trunk/bbb-voice-conference/config/asterisk/bbb_sip.conf /etc/asterisk/bbb_sip.conf]
 * If you are using Asterisk, make sure your conference number is at least 5-digits as defined by {{{exten => _XXXX.,n,Konference(${EXTEN},H)}}} in [http://code.google.com/p/bigbluebutton/source/browse/trunk/bbb-voice-conference/config/asterisk/bbb_extensions.conf /etc/asterisk/bbb_extensions.conf] 


=== Using the API examples I get an java.lang.!NullPointerException when trying to join a room ===

Using the API demos, after reconfiguring your networking or changing the hostname, you may see

{{{
Status Code: 500
Exception Type: null
Message:  null
Exception: java.lang.NullPointerException
   at org.apache.jsp.demo.demo1_jsp.getJoinURL(demo1_jsp.java:168)
   at org.apache.jsp.demo.demo1_jsp._jspService(demo1_jsp.java:624)
   at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java
   ...
}}}

That error is thrown by line 168 of bbb_api.jsp.  Here's the surrounding code

{{{
try {
   // Attempt to create a meeting using meetingID
   String xml = getURL(base_url_create + create_parameters +
"&checksum=" + checksum("create" + create_parameters + salt) );
   doc = parseXml(xml);
} catch (Exception e) {
   e.printStackTrace(); /* 168 */
}
}}}


What happens is that the `getURL()` command isn't returning valid XML, and
that is causing `parseXml()` to fail and throw an exception.  

The main reason `getURL()` fails is the URL it's passed isn't valid.  This URL is built using the variable `base_url_create`, which is created from the parameters set in bbb_api_conf.jsp, which are located in

{{{
   /var/lib/tomcat6/webapps/demo/bbb_api_conf.jsp
}}}

You'll see two parameters defined:

{{{
<%!
  // This is the security salt that must match the value set in the
BigBlueButton server
  String salt = "<salt>";
  // This is the URL for the BigBlueButton server
  String BigBlueButtonURL = "http://<your_hostname>/bigbluebutton/";
%>
}}}

What's likely happening is that !BigBlueButtonURL isn't resolving to a
valid host.  You can verify by using it's value to interactively make an API call from your browser.  To do this, enter the following URL in your browser

{{{
   http://<your_hostname>/bigbluebutton/api/isMeetingRunning?meetingID=abcdef
}}}

Of course, you won't have meeting abcdef running, but you *should* get
back an XML file similar to the following:

{{{
<response>
  <returncode>FAILED</returncode>
  <messageKey>checksumError</messageKey>
  <message>You did not pass the checksum security check</message>
</response>
}}}

Now, this URL isn't actually called by your web browser; rather, it's called by the !BigBlueButton server.  So login to your !BigBlueButton server and enter the following command:

{{{
   wget http://<your_hostname>/bigbluebutton/api/isMeetingRunning?meetingID=abcdef
-O -
}}}

and see if it again returns valid XML.  If you get back a blank document or a server error, then this is the reason why you are getting the above exception.  You need to change your networking setup or the value of !BigBlueButtonURL so that `http://<your_hostname>/bigbluebutton/` correctly resolves on the !BigBlueButton server.

=== All I get is a "Welcome to Nginx" screen" ===
If bbb-conf -c returns:
{{{
** Potential Problems **
                        nginx (conf): no symbolic link in /etc/nginx/sites-enabled for bigbluebutton
}}}
Then you need to add a symbolic link to nginx. Try the following:
{{{
sudo ln -s /etc/nginx/sites-available/bigbluebutton /etc/nginx/sites-enabled/bigbluebutton
sudo /etc/init.d/nginx restart
}}}


=== I have 2 microphones and want to choose with which to join the voice conference ===
When you're inside the client, righclick, go to settings > microphone icon > select microphone, and talk to see if it works by checking the volume bar.

=== When I try to join the conference, I get logged out after loading the modules ===
* Check if !BigBlueButton was able to connect to Asterisk AMI. Open {{{/usr/share/red5/log/bigbluebutton.log}}} and check for errors that has "login to AMI".
* Make sure that red5/webapps/bigbluebutton is running properly. Try tailing {{{tail -f /usr/share/red5/log/bigbluebutton.log}}} and try joining again. Look for clues in the resulting log.

=== My slides upload but never finish converting! ===
Try restarting tomcat6, and then red5. On Ubuntu:
{{{
sudo /etc/init.d/tomcat6 restart
sudo /etc/init.d/red5 restart
}}}


=== bbb-conf --check reports Host IP does not match !BigBlueButton ===

This is really more of a warning than an error.  If you are using a DNS name, and that DNS name resolves to the IP address, or you have an external DNS name that is port forwarded to !BigBlueButton, you can safely ignore the warning.

=== UTF characters won't display correctly in the Client ===
If you're using Linux, UTF characters won't display correctly. This is a Flash limitation and unfortunately there's not much we can do about it.



=== Which log files should I check for errors?  ===
Log and configuration file information can be found [http://code.google.com/p/bigbluebutton/wiki/ConfigurationFiles here]


=== How to access the red5 directory on the VM ===
You might want access to the red5 directory on the Virtual Machine. The following commands will share a shortcut to the red5 folder into your dev directory.

In /usr/share/red5
  sudo chmod go+w log
  sudo chown -R firstuser *

In /home/firstuser/dev
  ln -s /usr/share/red5 red5

=== How to I change the default startup language? ===

By default, the !BigBlueButton client should detect the browser's locale and use that default language accordingly.

The default language is English, but you can change that by modifying the value 

{{{
localeChain = "us_EN";
}}}

in `bigbluebutton/client/BigBlueButton.html`.  You can see the list of languages installed with !BigBlueButton in the directory `/var/www/bigbluebutton/client/locale/`.


== Other Questions ==
=== When will feature X be implemented ===

Keep in mind that !BigBlueButton is largely built by a group of (very determined) open source developers that volunteer their time.   Some of us work for companies that provide commercial support for !BigBlueButton (see http://bigbluebutton.org/support). 

Our goal is to make !BigBlueButton the leading open source web conferencing system for distance education.  That's no small task, and we've been working hard on it for [http://www.bigbluebutton.org/history/ over four years].

Time is a precious commodity.  In general, when planning the a release, we look at the outstanding issues in the following order: 
  # What are the most important items on our [RoadMap1dot0 road map]? 
  # What refactoring/features do the [FAQ#BigBlueButton_Committer core committers] believe are necessary to improve the code base/maintainability/usability of the project? 
  # What features are our community asking to implement (specifically, those not related to distance education, like control of remote desktop)?

For (1), you can see the work on the current iteration on our RoadMap  [RoadMap1dot0 BigBlueButton 1.0].  If the feature you are requesting are not on our RoadMap, you could open a [http://code.google.com/p/bigbluebutton/issues/list new issue] and make a convincing argument the feature belongs in (1).  

If you are a commercial company that wants to accelerate the development of a feature on the road map (or bug fixes), you can contact one of the companies that provides [http://www.bigbluebutton.org/commercial-support/ commercial support].

For (2), sometimes we'll revisit a previously implemented feature to improve it's performance or refactor the code.  Other times, we'll implement the features that have the highest value to the community with with the least amount of effort.  The features that are high-value and high-effort usually already land in (1) or (2).

For (3), if your feature does occur in the above during iteration, you have more options.  !BigBlueButton is an open source project: if you (or your organization) want to improve !BigBlueButton, we welcome your contribution.  See [http://code.google.com/p/bigbluebutton/wiki/FAQ#Contributing_to_BigBlueButton Contributing to BigBlueButton].

=== My Mac iSight camera no longer works in !BigBlueButton after a system update to Mac OS X 10.6.5 ===

There were some problems with the latest Flash update on Mac OS X.  See this [http://discussions.apple.com/thread.jspa?messageID=12641342&#12641342 Apple Support thread] for suggested solutions.

=== Why is my webcam image upside down? ===

We've occasionally seen this and it's almost always a driver issue.  A quick [http://www.google.ca/search?sourceid=chrome&ie=UTF-8&q=flash+webcam+upside+down google search] reveals some discussion threads of others who are experiencing the same issue with Flash.

=== How can I donate money to the project ===
The !BigblueButton project doesn't take donations.  We think its a poor business model for running a large open source project.

If you want to help the project financially, then approach some of the companies offering [http://bigbluebutton.org/support commercial support] for !BigBlueButton and engage their services.  This creates a healthy ecosystem around the project where companies are encouraged to contribute their resources to improve the project to create a larger pool of potential customers.

In other words, in the !BigBlueButton project, we would rather earn our revenues (we're entrepreneurs too!).

=== How do I change the brand of !BigBlueButton  ===
There have been a number of companies (and individuals) posting to the
mailing list asking for help in branding !BigBlueButton. 

In recent releases you can now [Branding skin] the !BigBlueButton interface.  However, the URL shows the word bigbluebutton.  There are lot of places in the code that need to be manually changed (and tested) to change this string, and these manual changes would need
to be updated (and tested anew) for each new version of !BigBlueButton.

From the point of view of the open source project, having the word bigbluebutton in the URL spreads awareness of the project and increases the community, which benefits everyone.  We know that many companies have released products based on !BigBlueButton, and they enjoy the commercial benefits of building on open source, and the project enjoys the increased awareness.  Everyone wins.

Still, from time to time, we see individual posts in our developer mailing list (usually from a commercial company) asking for help to completely remove all references to !BigBlueButton.  Rather than have the core developers support such branding efforts, we believe best option is to have the individual contact one of the companies that provide [http://bigbluebutton.org/support commercial support] for !BigBlueButton.

Doing this removes the inevitable problems that arise when manual code changes break in a new release and flood of forum posts ensue with the title "My
branding changes no longer work -- please help me!!"

Most importantly for everyone, the efforts to support a [http://en.wikipedia.org/wiki/White-label_product white labeled] version of !BigBlueButton won't take away from core
development, but will rather support it.


=== Is the scheduling interface in bbb-web still supported? ===

As of !BigBlueButton 0.63, we started transitioning away from the grails-based interface for scheduling conferences, located at http://ip/bigbluebutton.  We've found that most of our developers want to integrate !BigBlueButton into their application, so we've shifted focus to the !BigBlueButton API.

There are also some legacy stuff in the bbb-web interface, such as limiting the number of users, that is not implemented yet and we'll be properly implementing in the API.  

It may be in the future that the bbb-web interface is reborn and becomes a reference implementation of how to use the API, but we're currently focusing on providing examples through .jsp pages, which are much more portable and brandable for our users. 